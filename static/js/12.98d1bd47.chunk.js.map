{"version":3,"sources":["assets/img/cemetery.png","hooks/useEarnings.ts","hooks/useHarvest.ts","views/Bank/components/Harvest.tsx","hooks/useStake.ts","hooks/useStakedBalance.ts","hooks/useWithdraw.ts","views/Bank/components/DepositModal.tsx","views/Bank/components/WithdrawModal.tsx","views/Bank/components/Stake.tsx","hooks/useBank.ts","hooks/useStatsForPool.ts","hooks/useRedeem.ts","views/Bank/Bank.tsx","../node_modules/@material-ui/core/esm/CardActions/CardActions.js","views/Staking/StakeCard.js","hooks/useBanks.ts","views/Staking/Staking.js","hooks/useHandleTransactionReceipt.ts","components/ModalActions/ModalActions.tsx","hooks/useApprove.ts","components/UnlockWallet/UnlockWallet.tsx","hooks/useTombStats.ts","assets/img/bg.jpg","components/Spacer/Spacer.tsx","hooks/useLpStats.ts","components/Value/Value.tsx","hooks/useZap.ts","hooks/usetShareStats.ts","hooks/useStakedTokenPriceInDollars.ts","components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","hooks/useApproveZapper.ts","views/Bank/components/ZapModal.tsx","components/PageHeader/PageHeader.tsx","components/IconButton/IconButton.tsx"],"names":["module","exports","useEarnings","poolName","earnTokenName","poolId","useState","BigNumber","from","balance","setBalance","tombFinance","useTombFinance","isUnlocked","fetchBalance","useCallback","a","earnedFromBank","myAccount","useEffect","catch","err","console","error","stack","refreshBalance","setInterval","config","refreshInterval","clearInterval","useHarvest","bank","handleTransactionReceipt","useHandleTransactionReceipt","onReward","harvest","contract","StyledCardHeader","styled","div","StyledCardActions","props","theme","spacing","StyledCardContentInner","Harvest","earnings","tombStats","useTombStats","tShareStats","useShareStats","tokenName","tokenStats","tokenPriceInDollars","useMemo","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","Card","CardContent","TokenSymbol","symbol","earnToken","size","Value","value","Label","text","Button","onClick","disabled","eq","color","variant","useStake","onStake","amount","amountBn","parseUnits","depositToken","decimal","stake","depositTokenName","useStakedBalance","stakedBalanceOnBank","useWithdraw","onWithdraw","unstake","DepositModal","max","decimals","onConfirm","onDismiss","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","ModalTitle","TokenInput","onSelectMax","onChange","ModalActions","WithdrawModal","StyledActionSpacer","Stake","useApprove","address","approveStatus","approve","tokenBalance","useContext","ThemeContext","useTokenBalance","stakedBalance","stakedTokenPriceInDollars","useStakedTokenPriceInDollars","onZap","useZap","useModal","isNaN","onDismissDeposit","onPresentDeposit","ZapModal","zappingToken","onDissmissZap","onDismissWithdraw","onPresentWithdraw","ApprovalState","APPROVED","closedForStaking","PENDING","UNKNOWN","style","marginTop","IconButton","useBank","contractName","BanksContext","banks","find","useStatsForPool","poolAPRs","setPoolAPRs","fetchAPRsForPool","getPoolAPRs","useRedeem","onRedeem","exit","useStyles","makeStyles","gridItem","height","breakpoints","up","LPTokenHelpText","pairName","uniswapUrl","tombAddr","APEX","tshareAddr","ASHARE","includes","backgroundColor","StyledLink","href","target","BankNotFound","Center","PageHeader","icon","title","subtitle","StyledBank","primary","main","StyledCardsWrapper","StyledCardWrapper","Bank","window","scrollTo","classes","bankId","useParams","account","useWallet","statsOnPool","textAlign","Box","Grid","container","justify","marginBottom","item","xs","md","lg","className","Typography","yearlyAPR","dailyAPR","TVL","mt","Spacer","UnlockWallet","CardActions","React","ref","_props$disableSpacing","disableSpacing","other","_objectWithoutProperties","_extends","clsx","root","withStyles","display","alignItems","padding","marginLeft","name","StakeCard","position","right","top","width","borderRadius","justifyContent","toUpperCase","component","Link","to","useBanks","BackgroundImage","createGlobalStyle","CemeteryImage","Background","Staking","path","useRouteMatch","activeBanks","filter","finished","Page","exact","Container","maxWidth","align","gutterBottom","hidden","sectionInUI","length","map","Fragment","key","Alert","severity","addTransaction","useTransactionAdder","addPopup","useAddPopup","promise","summary","then","tx","message","toLowerCase","slice","StyledModalActions","grey","StyledModalAction","StyledSpacer","children","l","Children","toArray","child","i","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","token","spender","pendingApproval","useHasPendingApproval","currentAllowance","useAllowance","approvalState","lt","NOT_APPROVED","response","approval","tokenAddress","left","transform","AccountButton","stat","setStat","fastRefresh","useRefresh","getTombStat","fetchTombPrice","s","useLpStats","lpTicker","slowRefresh","getLPStat","fetchLpPrice","StyledValue","zapIn","getShareStat","fetchSharePrice","stakedTokenName","stakedToken","setStakedTokenPriceInDollars","getDepositTokenPriceInDollars","refreshStakedTokenPriceInDollars","StyledIcon","Icon","AddIcon","themeColor","viewBox","d","fill","RemoveIcon","useApproveZapper","FTM_TICKER","FTM","TOMB_TICKER","TSHARE_TICKER","ZAPPER_ROUTER_ADDR","StyledDescriptionText","StyledMenuItem","selected","MenuItem","ftmBalance","toString","tombBalance","tshareBalance","setZappingToken","zappingTokenBalance","setZappingTokenBalance","token0","token1","estimate","setEstimate","approveZapperStatus","approveZapper","tombFtmLpStats","tShareFtmLpStats","tombLPStats","tshareLPStats","ftmAmountPerLP","startsWith","ftmAmount","n","parseFloat","isFinite","estimateZapIn","String","estimateZap","rel","InputLabel","id","Select","event","labelId","StyledPageHeader","StyledTitle","h1","StyledSubtitle","h3","StyledButton","button","undefined"],"mappings":"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","file":"static/js/12.98d1bd47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cemetery.10f2f6b9.png\";","import { useCallback, useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport { ContractName } from '../tomb-finance';\r\nimport config from '../config';\r\n\r\nconst useEarnings = (poolName: ContractName, earnTokenName: String, poolId: Number) => {\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.earnedFromBank(poolName, earnTokenName, poolId, tombFinance.myAccount);\r\n    setBalance(balance);\r\n  }, [poolName, earnTokenName, poolId, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshBalance);\r\n    }\r\n  }, [isUnlocked, poolName, tombFinance, fetchBalance]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useEarnings;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\nimport { Bank } from '../tomb-finance';\r\n\r\nconst useHarvest = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleReward = useCallback(() => {\r\n    handleTransactionReceipt(\r\n      tombFinance.harvest(bank.contract, bank.poolId),\r\n      `Claim ${bank.earnTokenName} from ${bank.contract}`,\r\n    );\r\n  }, [bank, tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onReward: handleReward };\r\n};\r\n\r\nexport default useHarvest;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Button, Card, CardContent } from '@material-ui/core';\r\n// import Button from '../../../components/Button';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\n\r\nimport useEarnings from '../../../hooks/useEarnings';\r\nimport useHarvest from '../../../hooks/useHarvest';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport { Bank } from '../../../tomb-finance';\r\nimport useTombStats from '../../../hooks/useTombStats';\r\nimport useShareStats from '../../../hooks/usetShareStats';\r\n\r\ninterface HarvestProps {\r\n  bank: Bank;\r\n}\r\n\r\nconst Harvest: React.FC<HarvestProps> = ({ bank }) => {\r\n  const earnings = useEarnings(bank.contract, bank.earnTokenName, bank.poolId);\r\n  const { onReward } = useHarvest(bank);\r\n  const tombStats = useTombStats();\r\n  const tShareStats = useShareStats();\r\n\r\n  const tokenName = bank.earnTokenName === 'ASHARE' ? 'ASHARE' : 'APEX';\r\n  const tokenStats = bank.earnTokenName === 'ASHARE' ? tShareStats : tombStats;\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (tokenStats ? Number(tokenStats.priceInDollars).toFixed(2) : null),\r\n    [tokenStats],\r\n  );\r\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <StyledCardContentInner>\r\n          <StyledCardHeader>\r\n              <TokenSymbol symbol={bank.earnToken.symbol} size={54} />\r\n            <Value value={getDisplayBalance(earnings)} />\r\n            <Label text={`≈ $${earnedInDollars}`} />\r\n            <Label text={`${tokenName} Earned`} />\r\n          </StyledCardHeader>\r\n          <StyledCardActions>\r\n            <Button onClick={onReward} disabled={earnings.eq(0)} color=\"primary\" variant=\"contained\">\r\n              Claim\r\n            </Button>\r\n          </StyledCardActions>\r\n        </StyledCardContentInner>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[6]}px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Harvest;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\n\r\nconst useStake = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleStake = useCallback(\r\n    (amount: string) => {\r\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\r\n      handleTransactionReceipt(\r\n        tombFinance.stake(bank.contract, bank.poolId, amountBn),\r\n        `Stake ${amount} ${bank.depositTokenName} to ${bank.contract}`,\r\n      );\r\n    },\r\n    [bank, tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onStake: handleStake };\r\n};\r\n\r\nexport default useStake;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport { ContractName } from '../tomb-finance';\r\nimport config from '../config';\r\n\r\nconst useStakedBalance = (poolName: ContractName, poolId: Number) => {\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.stakedBalanceOnBank(poolName, poolId, tombFinance.myAccount);\r\n    setBalance(balance);\r\n  }, [poolName, poolId, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshBalance = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshBalance);\r\n    }\r\n  }, [isUnlocked, poolName, setBalance, tombFinance, fetchBalance]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalance;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\n\r\nconst useWithdraw = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleWithdraw = useCallback(\r\n    (amount: string) => {\r\n      const amountBn = parseUnits(amount, bank.depositToken.decimal);\r\n      handleTransactionReceipt(\r\n        tombFinance.unstake(bank.contract, bank.poolId, amountBn),\r\n        `Withdraw ${amount} ${bank.depositTokenName} from ${bank.contract}`,\r\n      );\r\n    },\r\n    [bank, tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onWithdraw: handleWithdraw };\r\n};\r\n\r\nexport default useWithdraw;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@material-ui/core';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface DepositModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  decimals: number;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, decimals, onConfirm, onDismiss, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, decimals, false);\r\n  }, [max, decimals]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Deposit ${tokenName}`} />\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        {/* <Button color=\"secondary\" variant=\"outlined\" onClick={onDismiss}>Cancel</Button> */}\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DepositModal;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@material-ui/core';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface WithdrawModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n  decimals?: number;\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', decimals = 18 }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, decimals, false);\r\n  }, [max, decimals]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Withdraw ${tokenName}`} />\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n        {/* <Button color=\"secondary\" onClick={onDismiss}>Cancel</Button> */}\r\n\r\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\r\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WithdrawModal;\r\n","import React, { useMemo, useContext } from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// import Button from '../../../components/Button';\r\nimport { Button, Card, CardContent } from '@material-ui/core';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport IconButton from '../../../components/IconButton';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\r\nimport useModal from '../../../hooks/useModal';\r\nimport useStake from '../../../hooks/useStake';\r\nimport useZap from '../../../hooks/useZap';\r\nimport useStakedBalance from '../../../hooks/useStakedBalance';\r\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useWithdraw from '../../../hooks/useWithdraw';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nimport DepositModal from './DepositModal';\r\nimport WithdrawModal from './WithdrawModal';\r\nimport ZapModal from './ZapModal';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport { Bank } from '../../../tomb-finance';\r\n\r\ninterface StakeProps {\r\n  bank: Bank;\r\n}\r\n\r\nconst Stake: React.FC<StakeProps> = ({ bank }) => {\r\n  const [approveStatus, approve] = useApprove(bank.depositToken, bank.address);\r\n\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  const tokenBalance = useTokenBalance(bank.depositToken);\r\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\r\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank.depositTokenName, bank.depositToken);\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (stakedTokenPriceInDollars ? stakedTokenPriceInDollars : null),\r\n    [stakedTokenPriceInDollars],\r\n  );\r\n  const earnedInDollars = (\r\n    Number(tokenPriceInDollars) * Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal))\r\n  ).toFixed(2);\r\n  const { onStake } = useStake(bank);\r\n  const { onZap } = useZap(bank);\r\n  const { onWithdraw } = useWithdraw(bank);\r\n\r\n  const [onPresentDeposit, onDismissDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      decimals={bank.depositToken.decimal}\r\n      onConfirm={(amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        onStake(amount);\r\n        onDismissDeposit();\r\n      }}\r\n      tokenName={bank.depositTokenName}\r\n    />,\r\n  );\r\n\r\n  const [onPresentZap, onDissmissZap] = useModal(\r\n    <ZapModal\r\n      decimals={bank.depositToken.decimal}\r\n      onConfirm={(zappingToken, tokenName, amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        onZap(zappingToken, tokenName, amount);\r\n        onDissmissZap();\r\n      }}\r\n      tokenName={bank.depositTokenName}\r\n    />,\r\n  );\r\n\r\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\r\n    <WithdrawModal\r\n      max={stakedBalance}\r\n      decimals={bank.depositToken.decimal}\r\n      onConfirm={(amount) => {\r\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\r\n        onWithdraw(amount);\r\n        onDismissWithdraw();\r\n      }}\r\n      tokenName={bank.depositTokenName}\r\n    />,\r\n  );\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <StyledCardContentInner>\r\n          <StyledCardHeader>\r\n              <TokenSymbol symbol={bank.depositToken.symbol} size={54} />\r\n            <Value value={getDisplayBalance(stakedBalance, bank.depositToken.decimal)} />\r\n            <Label text={`≈ $${earnedInDollars}`} />\r\n            <Label text={`${bank.depositTokenName} Staked`} />\r\n          </StyledCardHeader>\r\n          <StyledCardActions>\r\n            {approveStatus !== ApprovalState.APPROVED ? (\r\n              <Button\r\n                disabled={\r\n                  bank.closedForStaking ||\r\n                  approveStatus === ApprovalState.PENDING ||\r\n                  approveStatus === ApprovalState.UNKNOWN\r\n                }\r\n                onClick={approve}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                style={{ marginTop: '20px' }}\r\n              >\r\n                {`Approve ${bank.depositTokenName}`}\r\n              </Button>\r\n            ) : (\r\n              <>\r\n                <IconButton onClick={onPresentWithdraw}>\r\n                  <RemoveIcon />\r\n                </IconButton>\r\n                <StyledActionSpacer />\r\n                <IconButton\r\n                  disabled={bank.closedForStaking}\r\n                  onClick={() => (bank.closedForStaking ? null : onPresentDeposit())}\r\n                >\r\n                  <AddIcon />\r\n                </IconButton>\r\n              </>\r\n            )}\r\n          </StyledCardActions>\r\n        </StyledCardContentInner>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Stake;\r\n","import { useContext } from 'react';\r\nimport { Context as BanksContext } from '../contexts/Banks';\r\nimport { Bank, ContractName } from '../tomb-finance';\r\n\r\nconst useBank = (contractName: ContractName): Bank => {\r\n  const { banks } = useContext(BanksContext);\r\n  return banks.find((bank) => bank.contract === contractName);\r\n};\r\n\r\nexport default useBank;\r\n","import { useCallback, useState, useEffect } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport { PoolStats } from '../tomb-finance/types';\r\nimport config from '../config';\r\n\r\nconst useStatsForPool = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n\r\n  const [poolAPRs, setPoolAPRs] = useState<PoolStats>();\r\n\r\n  const fetchAPRsForPool = useCallback(async () => {\r\n    setPoolAPRs(await tombFinance.getPoolAPRs(bank));\r\n  }, [tombFinance, bank]);\r\n\r\n  useEffect(() => {\r\n    fetchAPRsForPool().catch((err) => console.error(`Failed to fetch ABOND price: ${err.stack}`));\r\n    const refreshInterval = setInterval(fetchAPRsForPool, config.refreshInterval);\r\n    return () => clearInterval(refreshInterval);\r\n  }, [setPoolAPRs, tombFinance, fetchAPRsForPool]);\r\n\r\n  return poolAPRs;\r\n};\r\n\r\nexport default useStatsForPool;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useRedeem = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleRedeem = useCallback(() => {\r\n    handleTransactionReceipt(tombFinance.exit(bank.contract, bank.poolId), `Redeem ${bank.contract}`);\r\n  }, [bank, tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onRedeem: handleRedeem };\r\n};\r\n\r\nexport default useRedeem;\r\n","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport { useWallet } from 'use-wallet';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Box, Button, Card, CardContent, Typography, Grid } from '@material-ui/core';\r\n\r\nimport PageHeader from '../../components/PageHeader';\r\nimport Spacer from '../../components/Spacer';\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Harvest from './components/Harvest';\r\nimport Stake from './components/Stake';\r\nimport useBank from '../../hooks/useBank';\r\nimport useStatsForPool from '../../hooks/useStatsForPool';\r\nimport useRedeem from '../../hooks/useRedeem';\r\nimport { Bank as BankEntity } from '../../tomb-finance';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridItem: {\r\n    height: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      height: '90px',\r\n    },\r\n  },\r\n}));\r\n\r\nconst Bank: React.FC = () => {\r\n  useEffect(() => window.scrollTo(0, 0));\r\n  const classes = useStyles();\r\n  const { bankId } = useParams();\r\n  const bank = useBank(bankId);\r\n\r\n  const { account } = useWallet();\r\n  const { onRedeem } = useRedeem(bank);\r\n  const statsOnPool = useStatsForPool(bank);\r\n  return account && bank ? (\r\n    <>\r\n      <div style={{ marginTop: '-50px', textAlign: 'center' }}>\r\n      <PageHeader\r\n        icon=\"🏦\"\r\n        subtitle={`Deposit ${bank?.depositTokenName} and earn ${bank?.earnTokenName}`}\r\n        // title={bank?.name}\r\n      />\r\n      </div>\r\n      <Box>\r\n        <Grid container justify=\"center\" spacing={3} style={{ marginBottom: '50px' }}>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>APR</Typography>\r\n                <Typography>{bank.closedForStaking ? '0.00' : statsOnPool?.yearlyAPR}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>Daily APR</Typography>\r\n                <Typography>{bank.closedForStaking ? '0.00' : statsOnPool?.dailyAPR}%</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n            <Card className={classes.gridItem}>\r\n              <CardContent style={{ textAlign: 'center' }}>\r\n                <Typography>TVL</Typography>\r\n                <Typography>${statsOnPool?.TVL}</Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Box mt={5}>\r\n        <StyledBank>\r\n          <StyledCardsWrapper>\r\n            <StyledCardWrapper>\r\n              <Harvest bank={bank} />\r\n            </StyledCardWrapper>\r\n            <Spacer />\r\n            <StyledCardWrapper>{<Stake bank={bank} />}</StyledCardWrapper>\r\n          </StyledCardsWrapper>\r\n          <Spacer size=\"lg\" />\r\n          {bank.depositTokenName.includes('LP') && <LPTokenHelpText bank={bank} />}\r\n          <Spacer size=\"lg\" />\r\n          <div>\r\n            <Button onClick={onRedeem} color=\"primary\" variant=\"contained\">\r\n              Claim & Withdraw\r\n            </Button>\r\n          </div>\r\n          <Spacer size=\"lg\" />\r\n        </StyledBank>\r\n      </Box>\r\n    </>\r\n  ) : !bank ? (\r\n    <BankNotFound />\r\n  ) : (\r\n    <UnlockWallet />\r\n  );\r\n};\r\n\r\nconst LPTokenHelpText: React.FC<{ bank: BankEntity }> = ({ bank }) => {\r\n  const tombFinance = useTombFinance();\r\n  const tombAddr = tombFinance.APEX.address;\r\n  const tshareAddr = tombFinance.ASHARE.address;\r\n\r\n  let pairName: string;\r\n  let uniswapUrl: string;\r\n  if (bank.depositTokenName.includes('APEX')) {\r\n    pairName = 'APEX-FTM pair';\r\n    uniswapUrl = 'https://spookyswap.finance/add/FTM/' + tombAddr;\r\n  } else {\r\n    pairName = 'ASHARE-FTM pair';\r\n    uniswapUrl = 'https://spookyswap.finance/add/FTM/' + tshareAddr;\r\n  }\r\n  return (\r\n    <Card style={{ backgroundColor: '#fff' }}>\r\n      <CardContent>\r\n        <StyledLink href={uniswapUrl} target=\"_blank\">\r\n          {`👻 Provide liquidity for ${pairName} now on SpookySwap 👻`}\r\n        </StyledLink>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst BankNotFound = () => {\r\n  return (\r\n    <Center>\r\n      <PageHeader icon=\"🏚\" title=\"Not Found\" subtitle=\"You've hit a bank just robbed by unicorns.\" />\r\n    </Center>\r\n  );\r\n};\r\n\r\nconst StyledBank = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  font-weight: 700;\r\n  text-decoration: none;\r\n  color: ${(props) => props.theme.color.primary.main};\r\n`;\r\n\r\nconst StyledCardsWrapper = styled.div`\r\n  display: flex;\r\n  width: 600px;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nconst Center = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default Bank;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > :not(:first-child)': {\n      marginLeft: 8\n    }\n  }\n};\nvar CardActions = /*#__PURE__*/React.forwardRef(function CardActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"disableSpacing\", \"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActions'\n})(CardActions);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Box, Button, Card, CardActions, CardContent, Typography, Grid } from '@material-ui/core';\r\n\r\nimport TokenSymbol from '../../components/TokenSymbol';\r\n\r\nconst StakeCard = ({ bank }) => {\r\n  return (\r\n    <Grid item xs={12} md={4} lg={4}>\r\n      <Card variant=\"outlined\">\r\n        <CardContent>\r\n          <Box style={{ position: 'relative' }}>\r\n            <Box\r\n              style={{\r\n                position: 'absolute',\r\n                right: '0px',\r\n                top: '-5px',\r\n                height: '48px',\r\n                width: '48px',\r\n                borderRadius: '40px',\r\n                backgroundColor: 'white',\r\n                alignItems: 'center',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n              }}\r\n            >\r\n              <TokenSymbol size={24} symbol={bank.depositTokenName} />\r\n            </Box>\r\n            <Typography style={{color:'#fff'}} variant=\"h6\">\r\n              {bank.depositTokenName}\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {/* {bank.name} */}\r\n              Deposit {bank.depositTokenName.toUpperCase()} Earn {` ${bank.earnTokenName}`}\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n        <CardActions style={{ justifyContent: 'flex-end' }}>\r\n          <Button color=\"primary\" size=\"small\" variant=\"contained\" component={Link} to={`/staking/${bank.contract}`}>\r\n            View\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default StakeCard;\r\n","import { useContext } from 'react';\r\nimport { Context as BanksContext } from '../contexts/Banks';\r\n\r\nconst useBanks = () => {\r\n  const { banks } = useContext(BanksContext);\r\n  return [banks];\r\n};\r\n\r\nexport default useBanks;\r\n","import React from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\r\nimport Bank from '../Bank';\r\n\r\nimport { Box, Container, Typography, Grid } from '@material-ui/core';\r\n\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Page from '../../components/Page';\r\nimport StakeCard from './StakeCard';\r\nimport CemeteryImage from '../../assets/img/cemetery.png';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport Background from '../../assets/img/bg.jpg';\r\n\r\nimport useBanks from '../../hooks/useBanks';\r\n\r\nconst BackgroundImage = createGlobalStyle`\r\n  body {\r\n    // background: url(${CemeteryImage}) no-repeat !important;\r\n    // background-size: cover !important;\r\n    background: url(${Background}) no-repeat !important;\r\n  }\r\n`;\r\n\r\nconst Staking = () => {\r\n  const [banks] = useBanks();\r\n  const { path } = useRouteMatch();\r\n  const { account } = useWallet();\r\n  const activeBanks = banks.filter((bank) => !bank.finished);\r\n  return (\r\n    <Switch>\r\n      <Page>\r\n        <Route exact path={path}>\r\n          <BackgroundImage />\r\n          \r\n          {!!account ? (\r\n            <Container maxWidth=\"lg\">\r\n              <Typography style={{color:'#fff'}} align=\"left\" variant=\"h5\" gutterBottom>\r\n                Staking\r\n              </Typography>\r\n\r\n              <Box mt={5}>\r\n                <div hidden={activeBanks.filter((bank) => bank.sectionInUI === 2).length === 0}>\r\n                  <Typography color=\"textPrimary\" variant=\"h6\" gutterBottom>\r\n                    Earn SSHARE by staking LP\r\n                  </Typography>\r\n                  <Grid container spacing={3}>\r\n                    {activeBanks\r\n                      .filter((bank) => bank.sectionInUI === 2)\r\n                      .map((bank) => (\r\n                        <React.Fragment key={bank.name}>\r\n                          <StakeCard bank={bank} />\r\n                        </React.Fragment>\r\n                      ))}\r\n                  </Grid>\r\n                </div>\r\n\r\n                <div hidden={activeBanks.filter((bank) => bank.sectionInUI === 1).length === 0}>\r\n                  <Typography color=\"textPrimary\" variant=\"h6\" gutterBottom style={{ marginTop: '20px' }}>\r\n                    Earn STONE by staking LP\r\n                  </Typography>\r\n                  {/* <Alert variant=\"filled\" severity=\"warning\">\r\n                   All below pools have ended. Please unstake and collect your rewards.\r\n                  </Alert> */}\r\n\r\n                  <Grid container spacing={3} style={{ marginTop: '20px' }}>\r\n                    {activeBanks\r\n                      .filter((bank) => bank.sectionInUI === 1)\r\n                      .map((bank) => (\r\n                        <React.Fragment key={bank.name}>\r\n                          <StakeCard bank={bank} />\r\n                        </React.Fragment>\r\n                      ))}\r\n                  </Grid>\r\n                </div>\r\n\r\n                <div hidden={activeBanks.filter((bank) => bank.sectionInUI === 0).length === 0}>\r\n                  <Typography color=\"textPrimary\" variant=\"h6\" gutterBottom style={{ marginTop: '20px' }}>\r\n                    Genesis Pools\r\n                  </Typography>\r\n                  \r\n                  <Alert variant=\"filled\" severity=\"warning\">\r\n                   All below pools have ended. Please unstake and collect your rewards.\r\n                  </Alert>\r\n\r\n                  <Grid container spacing={3} style={{ marginTop: '20px' }}>\r\n                    {activeBanks\r\n                      .filter((bank) => bank.sectionInUI === 0)\r\n                      .map((bank) => (\r\n                        <React.Fragment key={bank.name}>\r\n                          <StakeCard bank={bank} />\r\n                        </React.Fragment>\r\n                      ))}\r\n                  </Grid>\r\n                </div>\r\n              </Box>\r\n            </Container>\r\n          ) : (\r\n            <UnlockWallet />\r\n          )}\r\n        </Route>\r\n        <Route path={`${path}/:bankId`}>\r\n          <BackgroundImage />\r\n          <Bank />\r\n        </Route>\r\n      </Page>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Staking;\r\n","import { useCallback } from 'react';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { useTransactionAdder } from '../state/transactions/hooks';\r\nimport { useAddPopup } from '../state/application/hooks';\r\n\r\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\r\n  const addTransaction = useTransactionAdder();\r\n  const addPopup = useAddPopup();\r\n\r\n  return useCallback(\r\n    (promise: Promise<TransactionResponse>, summary: string) => {\r\n      promise\r\n        .then((tx) => addTransaction(tx, { summary }))\r\n        .catch((err) => {\r\n          if (err.message.includes('User denied')) {\r\n            // User denied transaction signature on MetaMask.\r\n            return;\r\n          }\r\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\r\n          console.error(`${message}: ${err.message || err.stack}`);\r\n          addPopup({ error: { message, stack: err.message || err.stack } });\r\n        });\r\n    },\r\n    [addPopup, addTransaction],\r\n  );\r\n}\r\n\r\nexport default useHandleTransactionReceipt;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length;\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <StyledSpacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  );\r\n};\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.color.grey[100]}00;\r\n  display: flex;\r\n  height: 96px;\r\n  margin: ${(props) => props.theme.spacing[4]}px ${(props) => -props.theme.spacing[4]}px\r\n    ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ModalActions;\r\n","import { BigNumber, ethers } from 'ethers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\r\nimport useAllowance from './useAllowance';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\r\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\r\n  const pendingApproval = useHasPendingApproval(token.address, spender);\r\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED;\r\n  }, [currentAllowance, pendingApproval]);\r\n\r\n  const addTransaction = useTransactionAdder();\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily');\r\n      return;\r\n    }\r\n\r\n    const response = await token.approve(spender, APPROVE_AMOUNT);\r\n    addTransaction(response, {\r\n      summary: `Approve ${token.symbol}`,\r\n      approval: {\r\n        tokenAddress: token.address,\r\n        spender: spender,\r\n      },\r\n    });\r\n  }, [approvalState, token, spender, addTransaction]);\r\n\r\n  return [approvalState, approve];\r\n}\r\n\r\nexport default useApprove;\r\n","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport AccountButton from '../Nav/AccountButton';\r\n\r\nconst UnlockWallet = () => {\r\n  return (\r\n    <Box style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\r\n      <AccountButton />\r\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UnlockWallet;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTombStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { fastRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchTombPrice(){\r\n      try {\r\n        setStat(await tombFinance.getTombStat());\r\n      }\r\n      catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n    fetchTombPrice();\r\n  }, [setStat, tombFinance, fastRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useTombStats;\r\n","module.exports = __webpack_public_path__ + \"static/media/bg.1923e644.jpg\";","import React, { useContext } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext);\r\n\r\n  let s: number;\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6];\r\n      break;\r\n    case 'sm':\r\n      s = spacing[2];\r\n      break;\r\n    case 'md':\r\n    default:\r\n      s = spacing[4];\r\n  }\r\n\r\n  return <StyledSpacer size={s} />;\r\n};\r\n\r\ninterface StyledSpacerProps {\r\n  size: number;\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`;\r\n\r\nexport default Spacer;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { LPStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useLpStats = (lpTicker: string) => {\r\n  const [stat, setStat] = useState<LPStat>();\r\n  const { slowRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchLpPrice() {\r\n      try{\r\n        setStat(await tombFinance.getLPStat(lpTicker));\r\n      }\r\n      catch(err){\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchLpPrice();\r\n  }, [setStat, tombFinance, slowRefresh, lpTicker]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useLpStats;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\ninterface ValueProps {\r\n  value: string;\r\n}\r\n\r\nconst Value: React.FC<ValueProps> = ({ value }) => {\r\n  return <StyledValue>{value}</StyledValue>;\r\n};\r\n\r\nconst StyledValue = styled.div`\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport default Value;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { Bank } from '../tomb-finance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useZap = (bank: Bank) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleZap = useCallback(\r\n    (zappingToken: string, tokenName: string, amount: string) => {\r\n      handleTransactionReceipt(\r\n        tombFinance.zapIn(zappingToken, tokenName, amount),\r\n        `Zap ${amount} in ${bank.depositTokenName}.`,\r\n      );\r\n    },\r\n    [bank, tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onZap: handleZap };\r\n};\r\n\r\nexport default useZap;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useShareStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { slowRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchSharePrice() {\r\n      try {\r\n        setStat(await tombFinance.getShareStat());\r\n      } catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n    fetchSharePrice();\r\n  }, [setStat, tombFinance, slowRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useShareStats;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\r\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\r\n    setStakedTokenPriceInDollars(balance);\r\n  }, [stakedToken, stakedTokenName, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\r\n    }\r\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\r\n\r\n  return stakedTokenPriceInDollars;\r\n};\r\n\r\nexport default useStakedTokenPriceInDollars;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IconProps {\r\n  color?: string;\r\n  children?: string;\r\n}\r\n\r\nconst Icon: React.FC = ({ children }) => <StyledIcon>{children}</StyledIcon>;\r\n\r\nconst StyledIcon = styled.div``;\r\n\r\nexport default Icon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst AddIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[900]} />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default AddIcon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst RemoveIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[900]} width=\"18px\" height=\"18px\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13H5v-2h14v2z\" />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default RemoveIcon;\r\n","import { BigNumber, ethers } from 'ethers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\r\nimport useAllowance from './useAllowance';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\nimport { FTM_TICKER, TOMB_TICKER, TSHARE_TICKER, ZAPPER_ROUTER_ADDR } from '../utils/constants';\r\nimport useTombFinance from './useTombFinance';\r\n\r\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\r\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nfunction useApproveZapper(zappingToken: string): [ApprovalState, () => Promise<void>] {\r\n  const tombFinance = useTombFinance();\r\n  let token: ERC20;\r\n  if (zappingToken === FTM_TICKER) token = tombFinance.FTM;\r\n  else if (zappingToken === TOMB_TICKER) token = tombFinance.APEX;\r\n  else if (zappingToken === TSHARE_TICKER) token = tombFinance.ASHARE;\r\n  const pendingApproval = useHasPendingApproval(token.address, ZAPPER_ROUTER_ADDR);\r\n  const currentAllowance = useAllowance(token, ZAPPER_ROUTER_ADDR, pendingApproval);\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (token === tombFinance.FTM) return ApprovalState.APPROVED;\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED;\r\n  }, [currentAllowance, pendingApproval, token, tombFinance]);\r\n\r\n  const addTransaction = useTransactionAdder();\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily');\r\n      return;\r\n    }\r\n\r\n    const response = await token.approve(ZAPPER_ROUTER_ADDR, APPROVE_AMOUNT);\r\n    addTransaction(response, {\r\n      summary: `Approve ${token.symbol}`,\r\n      approval: {\r\n        tokenAddress: token.address,\r\n        spender: ZAPPER_ROUTER_ADDR,\r\n      },\r\n    });\r\n  }, [approvalState, token, addTransaction]);\r\n\r\n  return [approvalState, approve];\r\n}\r\n\r\nexport default useApproveZapper;\r\n","import React, { useState, useMemo } from 'react';\r\n\r\nimport { Button, Select, MenuItem, InputLabel, Typography, withStyles } from '@material-ui/core';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\nimport styled from 'styled-components';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\nimport Label from '../../../components/Label';\r\nimport useLpStats from '../../../hooks/useLpStats';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useTombFinance from '../../../hooks/useTombFinance';\r\nimport { useWallet } from 'use-wallet';\r\nimport useApproveZapper, { ApprovalState } from '../../../hooks/useApproveZapper';\r\nimport { TOMB_TICKER, TSHARE_TICKER, FTM_TICKER } from '../../../utils/constants';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\ninterface ZapProps extends ModalProps {\r\n  onConfirm: (zapAsset: string, lpName: string, amount: string) => void;\r\n  tokenName?: string;\r\n  decimals?: number;\r\n}\r\n\r\nconst ZapModal: React.FC<ZapProps> = ({ onConfirm, onDismiss, tokenName = '', decimals = 18 }) => {\r\n  const tombFinance = useTombFinance();\r\n  const { balance } = useWallet();\r\n  const ftmBalance = (Number(balance) / 1e18).toFixed(4).toString();\r\n  const tombBalance = useTokenBalance(tombFinance.APEX);\r\n  const tshareBalance = useTokenBalance(tombFinance.ASHARE);\r\n  const [val, setVal] = useState('');\r\n  const [zappingToken, setZappingToken] = useState(FTM_TICKER);\r\n  const [zappingTokenBalance, setZappingTokenBalance] = useState(ftmBalance);\r\n  const [estimate, setEstimate] = useState({ token0: '0', token1: '0' }); // token0 will always be FTM in this case\r\n  const [approveZapperStatus, approveZapper] = useApproveZapper(zappingToken);\r\n  const tombFtmLpStats = useLpStats('STONE-FTM-LP');\r\n  const tShareFtmLpStats = useLpStats('SSHARE-FTM-LP');\r\n  const tombLPStats = useMemo(() => (tombFtmLpStats ? tombFtmLpStats : null), [tombFtmLpStats]);\r\n  const tshareLPStats = useMemo(() => (tShareFtmLpStats ? tShareFtmLpStats : null), [tShareFtmLpStats]);\r\n  const ftmAmountPerLP = tokenName.startsWith(TOMB_TICKER) ? tombLPStats?.ftmAmount : tshareLPStats?.ftmAmount;\r\n  /**\r\n   * Checks if a value is a valid number or not\r\n   * @param n is the value to be evaluated for a number\r\n   * @returns\r\n   */\r\n  function isNumeric(n: any) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n  const handleChangeAsset = (event: any) => {\r\n    const value = event.target.value;\r\n    setZappingToken(value);\r\n    setZappingTokenBalance(ftmBalance);\r\n    if (event.target.value === TSHARE_TICKER) {\r\n      setZappingTokenBalance(getDisplayBalance(tshareBalance, decimals));\r\n    }\r\n    if (event.target.value === TOMB_TICKER) {\r\n      setZappingTokenBalance(getDisplayBalance(tombBalance, decimals));\r\n    }\r\n  };\r\n\r\n  const handleChange = async (e: any) => {\r\n    if (e.currentTarget.value === '' || e.currentTarget.value === 0) {\r\n      setVal(e.currentTarget.value);\r\n      setEstimate({ token0: '0', token1: '0' });\r\n    }\r\n    if (!isNumeric(e.currentTarget.value)) return;\r\n    setVal(e.currentTarget.value);\r\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(e.currentTarget.value));\r\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\r\n  };\r\n\r\n  const handleSelectMax = async () => {\r\n    setVal(zappingTokenBalance);\r\n    const estimateZap = await tombFinance.estimateZapIn(zappingToken, tokenName, String(zappingTokenBalance));\r\n    setEstimate({ token0: estimateZap[0].toString(), token1: estimateZap[1].toString() });\r\n  };\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Zap in ${tokenName}`} />\r\n      <Typography variant=\"h6\" align=\"center\">\r\n        Powered by{' '}\r\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mlnl.finance\">\r\n          mlnl.finance\r\n        </a>\r\n      </Typography>\r\n\r\n      <StyledActionSpacer />\r\n      <InputLabel style={{ color: '#fff' }} id=\"label\">\r\n        Select asset to zap with\r\n      </InputLabel>\r\n      <Select\r\n        onChange={handleChangeAsset}\r\n        style={{ color: '#fff' }}\r\n        labelId=\"label\"\r\n        id=\"select\"\r\n        value={zappingToken}\r\n      >\r\n        <StyledMenuItem value={FTM_TICKER}>FTM</StyledMenuItem>\r\n        <StyledMenuItem value={TSHARE_TICKER}>ASHARE</StyledMenuItem>\r\n        {/* Apex as an input for zapping will be disabled due to issues occuring with the Gatekeeper system */}\r\n        {/* <StyledMenuItem value={TOMB_TICKER}>APEX</StyledMenuItem> */}\r\n      </Select>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={zappingTokenBalance}\r\n        symbol={zappingToken}\r\n      />\r\n      <Label text=\"Zap Estimations\" />\r\n      <StyledDescriptionText>\r\n        {' '}\r\n        {tokenName}: {Number(estimate.token0) / Number(ftmAmountPerLP)}\r\n      </StyledDescriptionText>\r\n      <StyledDescriptionText>\r\n        {' '}\r\n        ({Number(estimate.token0)} {FTM_TICKER} / {Number(estimate.token1)}{' '}\r\n        {tokenName.startsWith(TOMB_TICKER) ? TOMB_TICKER : TSHARE_TICKER}){' '}\r\n      </StyledDescriptionText>\r\n      <ModalActions>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={() =>\r\n            approveZapperStatus !== ApprovalState.APPROVED ? approveZapper() : onConfirm(zappingToken, tokenName, val)\r\n          }\r\n        >\r\n          {approveZapperStatus !== ApprovalState.APPROVED ? 'Approve' : \"Let's go\"}\r\n        </Button>\r\n      </ModalActions>\r\n\r\n      <StyledActionSpacer />\r\n      <Alert variant=\"filled\" severity=\"warning\">\r\n        Beta feature. Use at your own risk!\r\n      </Alert>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledDescriptionText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.color.grey[400]};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 22px;\r\n  justify-content: flex-start;\r\n`;\r\nconst StyledMenuItem = withStyles({\r\n  root: {\r\n    backgroundColor: 'white',\r\n    color: '#fff',\r\n    '&:hover': {\r\n      backgroundColor: 'grey',\r\n      color: '#fff',\r\n    },\r\n    selected: {\r\n      backgroundColor: 'black',\r\n    },\r\n  },\r\n})(MenuItem);\r\n\r\nexport default ZapModal;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface PageHeaderProps {\r\n  icon: React.ReactNode;\r\n  subtitle?: string;\r\n  title?: string;\r\n}\r\n\r\nconst PageHeader: React.FC<PageHeaderProps> = ({ icon, subtitle, title }) => {\r\n  return (\r\n    <StyledPageHeader>\r\n      {/* <StyledIcon>{icon}</StyledIcon> */}\r\n      <StyledTitle>{title}</StyledTitle>\r\n      <StyledSubtitle>{subtitle}</StyledSubtitle>\r\n    </StyledPageHeader>\r\n  );\r\n};\r\n\r\nconst StyledPageHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-bottom: ${(props) => props.theme.spacing[6]}px;\r\n  padding-top: ${(props) => props.theme.spacing[6]}px;\r\n  max-width: 512px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst StyledTitle = styled.h1`\r\n  color: ${(props) => props.theme.color.grey[200]};\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst StyledSubtitle = styled.h3`\r\n  color: ${(props) => props.theme.color.grey[700]};\r\n  font-size: 18px;\r\n  font-weight: 400;\r\n  margin: 0;\r\n  padding: 0;\r\n  text-align: center;\r\n`;\r\n\r\nexport default PageHeader;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IconButtonProps {\r\n  children?: React.ReactNode;\r\n  disabled?: boolean;\r\n  onClick?: () => void;\r\n  to?: string;\r\n}\r\n\r\nconst IconButton: React.FC<IconButtonProps> = ({ children, disabled, onClick, to }) => {\r\n  return (\r\n    <StyledButton disabled={disabled} onClick={onClick}>\r\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\ninterface StyledButtonProps {\r\n  disabled?: boolean;\r\n}\r\n/*\r\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\r\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\r\n */\r\n\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  align-items: center;\r\n  // background-color: ${(props) => props.theme.color.grey[!props.disabled ? 700 : 900]};\r\n  background-color: ${(props) => (!props.disabled ? '#0086ff' : props.theme.color.grey[900])};\r\n  border: 0;\r\n  border-radius: 28px;\r\n  color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\r\n  cursor: pointer;\r\n  display: flex;\r\n  font-weight: 700;\r\n  height: 56px;\r\n  justify-content: center;\r\n  letter-spacing: 1px;\r\n  outline: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\r\n  text-transform: uppercase;\r\n  width: 56px;\r\n  &:hover {\r\n    // background-color: ${(props) => props.theme.color.grey[800]};\r\n    background-color: #50efca;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 56px;\r\n  justify-content: center;\r\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n  text-decoration: none;\r\n`;\r\n\r\nexport default IconButton;\r\n"],"sourceRoot":""}