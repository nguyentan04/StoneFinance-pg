{"version":3,"sources":["tomb-finance/config.ts","tomb-finance/ether-utils.ts","utils/provider.ts","tomb-finance/ERC20.ts","tomb-finance/TombFinance.ts","contexts/TombFinanceProvider/TombFinanceProvider.tsx","hooks/useTombFinance.ts","contexts/Banks/context.ts","contexts/Banks/Banks.tsx","utils/formatBalance.ts","contexts/Modals/Modals.tsx","contexts/RefreshContext/RefreshContextProvider.tsx","config.ts","state/application/actions.ts","hooks/useNetworkPrompt.ts","state/transactions/reducer.ts","state/application/reducer.ts","state/index.ts","theme/colors.ts","theme/index.ts","newTheme.js","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","components/Loader/index.js","components/Loader/Loader.js","components/Popups/TransactionPopup.tsx","components/Popups/ErrorPopup.tsx","components/Popups/PopupItem.tsx","components/Popups/index.tsx","App.tsx","serviceWorker.js","index.tsx","utils/constants.ts","state/transactions/actions.ts","state/application/hooks.ts"],"names":["defaultEthereumConfig","testing","autoGasMultiplier","defaultConfirmations","defaultGas","defaultGasPrice","ethereumNodeTimeout","web3ProviderFrom","endpoint","config","ethConfig","Object","assign","includes","Web3","providers","WebsocketProvider","HttpProvider","timeout","decimalToBalance","d","decimals","parseUnits","String","provider","getDefaultProvider","ethers","Web3Provider","defaultProvider","chainId","ERC20","address","symbol","decimal","contract","this","Contract","ABI","signerOrProvider","estimateGas","totalSupply","account","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFrom","a","balance","formatUnits","supply","Number","toFixed","inputs","internalType","name","type","stateMutability","anonymous","indexed","outputs","TombFinance","cfg","myAccount","signer","contracts","externalTokens","masonryVersionOfUser","TOMBWFTM_LP","APEX","ASHARE","ABOND","FTM","deployments","entries","deployment","abi","tomb","tShare","tBond","IUniswapV2PairABI","newProvider","getSigner","connect","tokens","values","console","log","fetchMasonryVersionOfUser","then","version","catch","err","error","stack","ApexFtmRewardPool","ApexFtmLPApexRewardPool","ApexFtmLPApexRewardPoolOld","tombRewardPoolSupply","tombRewardPoolSupply2","tombCirculatingSupply","sub","getTokenPriceFromPancakeswap","priceInFTM","getWFTMPriceFromPancakeswap","priceOfOneFTM","priceOfTombInDollars","tokenInFtm","priceInDollars","getDisplayBalance","circulatingSupply","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","startsWith","isTomb","tokenAmountBN","tokenAmount","ftmAmountBN","ftmAmount","tokenAmountInOneLP","ftmAmountInOneLP","getLPTokenPrice","lpTokenPrice","lpTokenPriceFixed","toString","liquidity","priceOfOne","totalLiquidity","Treasury","getTombStat","tombStat","getBondPremiumRate","bondTombRatioBN","modifier","bondPriceInFTM","priceOfTBondInDollars","displayedTotalSupply","ApexFtmLPAShareRewardPool","tShareCirculatingSupply","priceOfSharesInDollars","SeigniorageOracle","twap","utils","parseEther","expectedPrice","getApexUpdatedPrice","getBurnableApexLeft","bank","undefined","depositToken","poolContract","getDepositTokenPriceInDollars","depositTokenName","depositTokenPrice","stakeInPool","TVL","earnTokenName","getShareStat","stat","getTokenPerSecond","tokenPerSecond","tokenPerHour","mul","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","contractName","endsWith","apexPerSecond","rewardPerSecond","div","poolStartTime","startDateTime","Date","toNumber","now","getTime","epochApexPerSecond","AsharePerSecond","tokenName","token","priceOfOneFtmInDollars","tokenPrice","getTokenPriceFromSpiritswap","epoch","getTombPrice","treasuryTombPrice","buyBonds","priceForTomb","redeemBonds","totalValue","bankDefinitions","bankInfo","pool","tokenAmountInPool","value","poolValue","isNaN","TSHAREPrice","currentMasonry","masonrytShareBalanceOf","masonryTVL","getFullDisplayBalance","tokenSupply","priceOfToken","tokenInLP","poolName","poolId","pendingAPEX","pendingShare","BigNumber","from","userInfo","deposit","withdraw","Masonry","tokenContract","ready","WFTM","wftm","Token","Fetcher","fetchPairData","wftmToToken","priceInBUSD","Route","midPrice","TokenSpirit","FetcherSpirit","liquidityToken","ftmBalanceInLP","shibaBalanceInLP","shibaAmount","priceOfShiba","FUSDT","fusdt_wftm_lp_pair","ftm_amount_BN","ftm_amount","fusdt_amount_BN","fusdt_amount","latestSnapshotIndex","boardroomHistory","lastHistory","lastRewardsReceived","TOMBPrice","amountOfRewardsPerDay","realAPR","canClaimReward","canWithdraw","getStakedSharesOnMasonry","stakedAmount","notStaked","result","isOldMasonryMember","Error","stake","getShareOf","getCashEarningsOf","earned","claimDividends","claimReward","exit","nextEpochPoint","nextEpochTimestamp","nextAllocation","prevAllocation","to","currentEpoch","boards","mason","startTimeEpoch","epochTimerStart","PERIOD","period","periodInHours","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","delta","endDate","moment","add","PeriodInHours","withdrawLockupEpochs","assetName","window","ethereum","networkVersion","asset","assetUrl","request","method","params","options","image","tombAmount","TaxOffice","overrides","addLiquidityETHTaxFree","SpookyRouter","getReserves","_reserve0","_reserve1","quote","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryMasonryFundedFilter","MasonryFunded","boughtBondsFilter","BoughtBonds","redeemBondsFilter","RedeemedBonds","epochBlocksRanges","queryFilter","masonryFundEvents","events","forEach","index","push","masonryFund","args","startBlock","blockNumber","boughBonds","redeemedBonds","endBlock","getBondsWithFilterForPeriod","bondsBought","bondsRedeemed","devFund","daoFund","filter","bondsAmount","length","lpName","zapper","FTM_TICKER","estimateZapIn","SPOOKY_ROUTER_ADDR","estimate","TOMB_TICKER","estimateZapInToken","zapIn","zapInToken","tbondAmount","TShareSwapper","swapTBondToTShare","estimateAmountOfTShare","estimateBN","getTShareBalance","tshareBalanceBN","getTBondBalance","tbondBalanceBN","getTShareAmountPerTomb","rateTSharePerTombBN","tshareBalance","tbondBalance","rateTSharePerTomb","Context","createContext","tombFinance","TombFinanceProvider","children","useWallet","useState","setTombFinance","useEffect","unlockWallet","Provider","useTombFinance","useContext","context","banks","Banks","setBanks","isUnlocked","fetchPools","useCallback","finished","stakedBalanceOnBank","lte","earnToken","sort","b","fractionDigits","isTruncated","number","getBalance","ret","slice","pow","onPresent","onDismiss","StyledModalWrapper","styled","StyledModalBackdrop","Modals","isOpen","setIsOpen","content","setContent","handlePresent","modalContent","handleDismiss","onClick","React","isValidElement","cloneElement","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","interval","setInterval","prev","clearInterval","configurations","development","ChainId","MAINNET","networkName","ftmscanUrl","require","BOO","ZOO","SHIBA","baseLaunchDate","bondLaunchesAt","masonryLaunchesAt","refreshInterval","production","sectionInUI","closedForStaking","ApexBooRewardPool","ApexShibaRewardPool","ApexZooRewardPool","AshareFtmLPAShareRewardPool","updateBlockNumber","createAction","toggleWalletModal","toggleSettingsMenu","addPopup","removePopup","usePromptNetwork","networkPrompt","setNetworkPrompt","connectToNetwork","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","createReducer","builder","addCase","addTransaction","transactions","payload","hash","approval","summary","txs","addedTime","clearAllTransactions","checkedTransaction","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","popupList","walletModalOpen","settingsMenuOpen","state","action","key","removeAfterMs","popup","concat","nanoid","show","p","PERSISTED_KEYS","store","configureStore","reducer","application","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","teal","200","theme","borderRadius","color","black","grey","100","300","400","500","600","700","800","900","purple","primary","light","main","secondary","white","siteWidth","spacing","1","2","3","4","5","6","7","topBarSize","newTheme","createMuiTheme","palette","text","background","default","paper","dark","contrastText","disabledBackground","active","hover","typography","fontFamily","join","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","dispatch","useDispatch","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","setState","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","lastBlockNumber","useBlockNumber","useSelector","useAddPopup","keys","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","status","transactionHash","transactionIndex","txn","success","Updaters","Loader","style","position","left","top","transform","Typography","RowNoFlex","TransactionPopup","ThemeContext","paddingRight","size","StyledPopupDesc","StyledLink","target","href","span","props","ErrorPopup","message","copyErrorDetails","navigator","clipboard","writeText","StyledClose","X","Popup","Fader","AnimatedFader","animated","PopupItem","popKey","useRemovePopup","removeThisPopup","popupContent","faderStyle","useSpring","width","duration","text2","MobilePopupWrapper","height","MobilePopupInner","FixedPopupColumn","Popups","activePopups","useActivePopups","map","item","reverse","Home","lazy","Staking","Boardroom","Bonds","NoMatch","Providers","connectors","walletconnect","rpcUrl","walletlink","url","appName","appLogoUrl","App","localStorage","version_app","clear","setItem","fallback","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","registration","unregister","TSHARE_TICKER","ZAPPER_ROUTER_ADDR","TAX_OFFICE_ADDR","list","useMemo"],"mappings":"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","file":"static/js/main.033a35c0.chunk.js","sourcesContent":["import { Deployments } from './deployments';\r\nimport { ChainId } from '@spookyswap/sdk';\r\n\r\nexport type Configuration = {\r\n  chainId: ChainId;\r\n  networkName: string;\r\n  ftmscanUrl: string;\r\n  defaultProvider: string;\r\n  deployments: Deployments;\r\n  externalTokens: { [contractName: string]: [string, number] };\r\n  config?: EthereumConfig;\r\n\r\n  baseLaunchDate: Date;\r\n  bondLaunchesAt: Date;\r\n  masonryLaunchesAt: Date;\r\n\r\n  refreshInterval: number;\r\n};\r\n\r\nexport type EthereumConfig = {\r\n  testing: boolean;\r\n  autoGasMultiplier: number;\r\n  defaultConfirmations: number;\r\n  defaultGas: string;\r\n  defaultGasPrice: string;\r\n  ethereumNodeTimeout: number;\r\n};\r\n\r\nexport const defaultEthereumConfig = {\r\n  testing: false,\r\n  autoGasMultiplier: 1.5,\r\n  defaultConfirmations: 1,\r\n  defaultGas: '6000000',\r\n  defaultGasPrice: '1000000000000',\r\n  ethereumNodeTimeout: 10000,\r\n};\r\n","import Web3 from 'web3';\r\nimport { defaultEthereumConfig, EthereumConfig } from './config';\r\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\r\nimport { BigNumber } from 'ethers';\r\n\r\nexport function web3ProviderFrom(endpoint: string, config?: EthereumConfig): any {\r\n  const ethConfig = Object.assign(defaultEthereumConfig, config || {});\r\n\r\n  const providerClass = endpoint.includes('wss') ? Web3.providers.WebsocketProvider : Web3.providers.HttpProvider;\r\n\r\n  return new providerClass(endpoint, {\r\n    timeout: ethConfig.ethereumNodeTimeout,\r\n  });\r\n}\r\n\r\nexport function balanceToDecimal(s: string): string {\r\n  return formatUnits(s);\r\n}\r\n\r\nexport function decimalToBalance(d: string | number, decimals = 18): BigNumber {\r\n  return parseUnits(String(d), decimals);\r\n}\r\n","import { ethers } from 'ethers';\r\nimport config from '../config';\r\nimport { web3ProviderFrom } from '../tomb-finance/ether-utils';\r\n\r\nlet provider: ethers.providers.Web3Provider = null;\r\n\r\nexport function getDefaultProvider(): ethers.providers.Web3Provider {\r\n  if (!provider) {\r\n    provider = new ethers.providers.Web3Provider(web3ProviderFrom(config.defaultProvider), config.chainId);\r\n  }\r\n\r\n  return provider;\r\n}","import { BigNumber, Contract } from 'ethers';\r\nimport { Signer } from '@ethersproject/abstract-signer';\r\nimport { Provider } from '@ethersproject/abstract-provider';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { formatUnits } from 'ethers/lib/utils';\r\n\r\nclass ERC20 {\r\n  private contract: Contract;\r\n\r\n  address: string;\r\n  symbol: string;\r\n  decimal: number;\r\n\r\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\r\n    this.contract = new Contract(address, ABI, provider);\r\n    this.address = address;\r\n    this.symbol = symbol;\r\n    this.decimal = decimal;\r\n  }\r\n\r\n  connect(signerOrProvider: Signer | Provider) {\r\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\r\n  }\r\n\r\n  get estimateGas() {\r\n    return this.contract.estimateGas;\r\n  }\r\n\r\n  totalSupply(): Promise<BigNumber> {\r\n    return this.contract.totalSupply();\r\n  }\r\n\r\n  balanceOf(account: string): Promise<BigNumber> {\r\n    return this.contract.balanceOf(account);\r\n  }\r\n\r\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.transfer(recipient, amount);\r\n  }\r\n\r\n  allowance(owner: string, spender: string): Promise<BigNumber> {\r\n    return this.contract.allowance(owner, spender);\r\n  }\r\n\r\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.approve(spender, amount);\r\n  }\r\n\r\n  transferFrom(sender: string, recipient: string, amount: BigNumber): Promise<TransactionResponse> {\r\n    return this.contract.transferFrom(sender, recipient, amount);\r\n  }\r\n\r\n  async displayedBalanceOf(account: string): Promise<string> {\r\n    const balance = await this.balanceOf(account);\r\n    return formatUnits(balance, this.decimal);\r\n  }\r\n\r\n  async displayedTotalSupply(): Promise<string> {\r\n    const supply = await this.totalSupply();\r\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\r\n  }\r\n}\r\n\r\nexport default ERC20;\r\n\r\nconst ABI = [\r\n  {\r\n    inputs: [\r\n      { internalType: 'string', name: 'name', type: 'string' },\r\n      {\r\n        internalType: 'string',\r\n        name: 'symbol',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'name',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'symbol',\r\n    outputs: [\r\n      {\r\n        internalType: 'string',\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'decimals',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint8',\r\n        name: '',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transfer',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'addedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'increaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'subtractedValue',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'decreaseAllowance',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n];\r\n","// import { Fetcher, Route, Token } from '@uniswap/sdk';\r\nimport { Fetcher as FetcherSpirit, Token as TokenSpirit } from '@spiritswap/sdk';\r\nimport { Fetcher, Route, Token } from '@spookyswap/sdk';\r\nimport { Configuration } from './config';\r\nimport { ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats, TShareSwapperStat } from './types';\r\nimport { BigNumber, Contract, ethers, EventFilter } from 'ethers';\r\nimport { decimalToBalance } from './ether-utils';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport ERC20 from './ERC20';\r\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\r\nimport { getDefaultProvider } from '../utils/provider';\r\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\r\nimport config, { bankDefinitions } from '../config';\r\nimport moment from 'moment';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\nimport { FTM_TICKER, SPOOKY_ROUTER_ADDR, TOMB_TICKER } from '../utils/constants';\r\n/**\r\n * An API module of Apex Finance contracts.\r\n * All contract-interacting domain logic should be defined in here.\r\n */\r\nexport class TombFinance {\r\n  myAccount: string;\r\n  provider: ethers.providers.Web3Provider;\r\n  signer?: ethers.Signer;\r\n  config: Configuration;\r\n  contracts: { [name: string]: Contract };\r\n  externalTokens: { [name: string]: ERC20 };\r\n  masonryVersionOfUser?: string;\r\n\r\n  TOMBWFTM_LP: Contract;\r\n  APEX: ERC20;\r\n  ASHARE: ERC20;\r\n  ABOND: ERC20;\r\n  FTM: ERC20;\r\n\r\n  constructor(cfg: Configuration) {\r\n    const { deployments, externalTokens } = cfg;\r\n    const provider = getDefaultProvider();\r\n\r\n    // loads contracts from deployments\r\n    this.contracts = {};\r\n    for (const [name, deployment] of Object.entries(deployments)) {\r\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\r\n    }\r\n    this.externalTokens = {};\r\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\r\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\r\n    }\r\n    this.APEX = new ERC20(deployments.tomb.address, provider, 'APEX');\r\n    this.ASHARE = new ERC20(deployments.tShare.address, provider, 'ASHARE');\r\n    this.ABOND = new ERC20(deployments.tBond.address, provider, 'ABOND');\r\n    this.FTM = this.externalTokens['WFTM'];\r\n\r\n    // Uniswap V2 Pair\r\n    this.TOMBWFTM_LP = new Contract(externalTokens['STONE-FTM-LP'][0], IUniswapV2PairABI, provider);\r\n\r\n    this.config = cfg;\r\n    this.provider = provider;\r\n  }\r\n\r\n  /**\r\n   * @param provider From an unlocked wallet. (e.g. Metamask)\r\n   * @param account An address of unlocked wallet account.\r\n   */\r\n  unlockWallet(provider: any, account: string) {\r\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\r\n    this.signer = newProvider.getSigner(0);\r\n    this.myAccount = account;\r\n    for (const [name, contract] of Object.entries(this.contracts)) {\r\n      this.contracts[name] = contract.connect(this.signer);\r\n    }\r\n    const tokens = [this.APEX, this.ASHARE, this.ABOND, ...Object.values(this.externalTokens)];\r\n    for (const token of tokens) {\r\n      token.connect(this.signer);\r\n    }\r\n    this.TOMBWFTM_LP = this.TOMBWFTM_LP.connect(this.signer);\r\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\r\n    this.fetchMasonryVersionOfUser()\r\n      .then((version) => (this.masonryVersionOfUser = version))\r\n      .catch((err) => {\r\n        console.error(`Failed to fetch masonry version: ${err.stack}`);\r\n        this.masonryVersionOfUser = 'latest';\r\n      });\r\n  }\r\n\r\n  get isUnlocked(): boolean {\r\n    return !!this.myAccount;\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //===================FROM SPOOKY TO DISPLAY =========================\r\n  //=========================IN HOME PAGE==============================\r\n  //===================================================================\r\n\r\n  async getTombStat(): Promise<TokenStat> {\r\n    const { ApexFtmRewardPool, ApexFtmLPApexRewardPool, ApexFtmLPApexRewardPoolOld } = this.contracts;\r\n    const supply = await this.APEX.totalSupply();\r\n    const tombRewardPoolSupply = await this.APEX.balanceOf(ApexFtmRewardPool.address);\r\n    const tombRewardPoolSupply2 = await this.APEX.balanceOf(ApexFtmLPApexRewardPool.address);\r\n    // const tombRewardPoolSupplyOld = await this.APEX.balanceOf(ApexFtmLPApexRewardPoolOld.address);\r\n    const tombCirculatingSupply = supply\r\n      .sub(tombRewardPoolSupply)\r\n      .sub(tombRewardPoolSupply2);\r\n      // .sub(tombRewardPoolSupplyOld);\r\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.APEX);\r\n    const priceOfOneFTM = await this.getWFTMPriceFromPancakeswap();\r\n    const priceOfTombInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\r\n\r\n    return {\r\n      tokenInFtm: priceInFTM,\r\n      priceInDollars: priceOfTombInDollars,\r\n      totalSupply: getDisplayBalance(supply, this.APEX.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.APEX.decimal, 0),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculates various stats for the requested LP\r\n   * @param name of the LP token to load stats for\r\n   * @returns\r\n   */\r\n  async getLPStat(name: string): Promise<LPStat> {\r\n    const lpToken = this.externalTokens[name];\r\n    const lpTokenSupplyBN = await lpToken.totalSupply();\r\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\r\n    const token0 = name.startsWith('APEX') ? this.APEX : this.ASHARE;\r\n    const isTomb = name.startsWith('APEX');\r\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\r\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\r\n\r\n    const ftmAmountBN = await this.FTM.balanceOf(lpToken.address);\r\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\r\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\r\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\r\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isTomb);\r\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\r\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\r\n    return {\r\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\r\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\r\n      priceOfOne: lpTokenPriceFixed,\r\n      totalLiquidity: liquidity,\r\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Use this method to get price for Apex\r\n   * @returns TokenStat for ABOND\r\n   * priceInFTM\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getBondStat(): Promise<TokenStat> {\r\n    const { Treasury } = this.contracts;\r\n    const tombStat = await this.getTombStat();\r\n    const bondTombRatioBN = await Treasury.getBondPremiumRate();\r\n    const modifier = bondTombRatioBN / 1e18 > 1 ? bondTombRatioBN / 1e18 : 1;\r\n    const bondPriceInFTM = (Number(tombStat.tokenInFtm) * modifier).toFixed(2);\r\n    const priceOfTBondInDollars = (Number(tombStat.priceInDollars) * modifier).toFixed(2);\r\n    const supply = await this.ABOND.displayedTotalSupply();\r\n    return {\r\n      tokenInFtm: bondPriceInFTM,\r\n      priceInDollars: priceOfTBondInDollars,\r\n      totalSupply: supply,\r\n      circulatingSupply: supply,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @returns TokenStat for ASHARE\r\n   * priceInFTM\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getShareStat(): Promise<TokenStat> {\r\n    const { ApexFtmLPAShareRewardPool } = this.contracts;\r\n\r\n    const supply = await this.ASHARE.totalSupply();\r\n\r\n    const priceInFTM = await this.getTokenPriceFromPancakeswap(this.ASHARE);\r\n    const tombRewardPoolSupply = await this.ASHARE.balanceOf(ApexFtmLPAShareRewardPool.address);\r\n    const tShareCirculatingSupply = supply.sub(tombRewardPoolSupply);\r\n    const priceOfOneFTM = await this.getWFTMPriceFromPancakeswap();\r\n    const priceOfSharesInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\r\n\r\n    return {\r\n      tokenInFtm: priceInFTM,\r\n      priceInDollars: priceOfSharesInDollars,\r\n      totalSupply: getDisplayBalance(supply, this.ASHARE.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.ASHARE.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getTombStatInEstimatedTWAP(): Promise<TokenStat> {\r\n    const { SeigniorageOracle, ApexFtmRewardPool } = this.contracts;\r\n    const expectedPrice = await SeigniorageOracle.twap(this.APEX.address, ethers.utils.parseEther('1'));\r\n\r\n    const supply = await this.APEX.totalSupply();\r\n    const tombRewardPoolSupply = await this.APEX.balanceOf(ApexFtmRewardPool.address);\r\n    const tombCirculatingSupply = supply.sub(tombRewardPoolSupply);\r\n    return {\r\n      tokenInFtm: getDisplayBalance(expectedPrice),\r\n      priceInDollars: getDisplayBalance(expectedPrice),\r\n      totalSupply: getDisplayBalance(supply, this.APEX.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(tombCirculatingSupply, this.APEX.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getTombPriceInLastTWAP(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getApexUpdatedPrice();\r\n  }\r\n\r\n  async getBondsPurchasable(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getBurnableApexLeft();\r\n  }\r\n\r\n  /**\r\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\r\n   * @param bank\r\n   * @returns\r\n   */\r\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\r\n    if (this.myAccount === undefined) return;\r\n    const depositToken = bank.depositToken;\r\n    const poolContract = this.contracts[bank.contract];\r\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\r\n    const stakeInPool = await depositToken.balanceOf(bank.address);\r\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    const stat = bank.earnTokenName === 'APEX' ? await this.getTombStat() : await this.getShareStat();\r\n    const tokenPerSecond = await this.getTokenPerSecond(\r\n      bank.earnTokenName,\r\n      bank.contract,\r\n      poolContract,\r\n      bank.depositTokenName,\r\n    );\r\n\r\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\r\n    const totalRewardPricePerYear =\r\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\r\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\r\n    const totalStakingTokenInPool =\r\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\r\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\r\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\r\n    return {\r\n      dailyAPR: dailyAPR.toFixed(2).toString(),\r\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\r\n      TVL: TVL.toFixed(2).toString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Method to return the amount of tokens the pool yields per second\r\n   * @param earnTokenName the name of the token that the pool is earning\r\n   * @param contractName the contract of the pool/bank\r\n   * @param poolContract the actual contract of the pool\r\n   * @returns\r\n   */\r\n  async getTokenPerSecond(\r\n    earnTokenName: string,\r\n    contractName: string,\r\n    poolContract: Contract,\r\n    depositTokenName: string,\r\n  ) {\r\n    if (earnTokenName === 'APEX') {\r\n      if (!contractName.endsWith('ApexRewardPool')) {\r\n        const rewardPerSecond = await poolContract.apexPerSecond();\r\n        if (depositTokenName === 'WFTM') {\r\n          return rewardPerSecond.mul(6000).div(11000).div(24);\r\n        } else if (depositTokenName === 'BOO') {\r\n          return rewardPerSecond.mul(2500).div(11000).div(24);\r\n        } else if (depositTokenName === 'ZOO') {\r\n          return rewardPerSecond.mul(1000).div(11000).div(24);\r\n        } else if (depositTokenName === 'SHIBA') {\r\n          return rewardPerSecond.mul(1500).div(11000).div(24);\r\n        }\r\n        return rewardPerSecond.div(24);\r\n      }\r\n      const poolStartTime = await poolContract.poolStartTime();\r\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\r\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\r\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\r\n        return await poolContract.epochApexPerSecond(1);\r\n      }\r\n      return await poolContract.epochApexPerSecond(0);\r\n    }\r\n    const rewardPerSecond = await poolContract.AsharePerSecond();\r\n    if (depositTokenName.startsWith('APEX')) {\r\n      return rewardPerSecond.mul(1000).div(2500);\r\n    } else {\r\n      return rewardPerSecond.mul(1500).div(2500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\r\n   * If the deposited token is an LP it will find the price of its pieces\r\n   * @param tokenName\r\n   * @param pool\r\n   * @param token\r\n   * @returns\r\n   */\r\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\r\n    let tokenPrice;\r\n    const priceOfOneFtmInDollars = await this.getWFTMPriceFromPancakeswap();\r\n    if (tokenName === 'WFTM') {\r\n      tokenPrice = priceOfOneFtmInDollars;\r\n    } else {\r\n      if (tokenName === 'STONE-FTM-LP') {\r\n        tokenPrice = await this.getLPTokenPrice(token, this.APEX, true);\r\n      } else if (tokenName === 'SSHARE-FTM-LP') {\r\n        tokenPrice = await this.getLPTokenPrice(token, this.ASHARE, false);\r\n      } else if (tokenName === 'SHIBA') {\r\n        tokenPrice = await this.getTokenPriceFromSpiritswap(token);\r\n      } else {\r\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\r\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\r\n      }\r\n    }\r\n    return tokenPrice;\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //=========================== END ===================================\r\n  //===================================================================\r\n\r\n  async getCurrentEpoch(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.epoch();\r\n  }\r\n\r\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getBondPremiumRate();\r\n  }\r\n\r\n  /**\r\n   * Buy bonds with cash.\r\n   * @param amount amount of cash to purchase bonds with.\r\n   */\r\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\r\n    const { Treasury } = this.contracts;\r\n    const treasuryTombPrice = await Treasury.getTombPrice();\r\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryTombPrice);\r\n  }\r\n\r\n  /**\r\n   * Redeem bonds for cash.\r\n   * @param amount amount of bonds to redeem.\r\n   */\r\n  async redeemBonds(amount: string): Promise<TransactionResponse> {\r\n    const { Treasury } = this.contracts;\r\n    const priceForTomb = await Treasury.getTombPrice();\r\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForTomb);\r\n  }\r\n\r\n  async getTotalValueLocked(): Promise<Number> {\r\n    let totalValue = 0;\r\n    for (const bankInfo of Object.values(bankDefinitions)) {\r\n      const pool = this.contracts[bankInfo.contract];\r\n      const token = this.externalTokens[bankInfo.depositTokenName];\r\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\r\n      const tokenAmountInPool = await token.balanceOf(pool.address);\r\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\r\n      const poolValue = Number.isNaN(value) ? 0 : value;\r\n      totalValue += poolValue;\r\n    }\r\n\r\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\r\n    const masonrytShareBalanceOf = await this.ASHARE.balanceOf(this.currentMasonry().address);\r\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.ASHARE.decimal)) * Number(TSHAREPrice);\r\n\r\n    return totalValue + masonryTVL;\r\n  }\r\n\r\n  /**\r\n   * Calculates the price of an LP token\r\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\r\n   * @param lpToken the token under calculation\r\n   * @param token the token pair used as reference (the other one would be FTM in most cases)\r\n   * @param isTomb sanity check for usage of tomb token or tShare\r\n   * @returns price of the LP token\r\n   */\r\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isTomb: boolean): Promise<string> {\r\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\r\n    //Get amount of tokenA\r\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\r\n    const stat = isTomb === true ? await this.getTombStat() : await this.getShareStat();\r\n    const priceOfToken = stat.priceInDollars;\r\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\r\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\r\n      .toString();\r\n    return tokenPrice;\r\n  }\r\n\r\n  async earnedFromBank(\r\n    poolName: ContractName,\r\n    earnTokenName: String,\r\n    poolId: Number,\r\n    account = this.myAccount,\r\n  ): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      if (earnTokenName === 'APEX') {\r\n        return await pool.pendingAPEX(poolId, account);\r\n      } else {\r\n        return await pool.pendingShare(poolId, account);\r\n      }\r\n    } catch (err) {\r\n      console.error(`Failed to call earned() on pool ${pool.address}: ${err.stack}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      let userInfo = await pool.userInfo(poolId, account);\r\n      return await userInfo.amount;\r\n    } catch (err) {\r\n      console.error(`Failed to call balanceOf() on pool ${pool.address}: ${err.stack}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deposits token to given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.deposit(poolId, amount);\r\n  }\r\n\r\n  /**\r\n   * Withdraws token from given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.withdraw(poolId, amount);\r\n  }\r\n\r\n  /**\r\n   * Transfers earned token reward from given pool to my account.\r\n   */\r\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\r\n    return await pool.withdraw(poolId, 0);\r\n  }\r\n\r\n  /**\r\n   * Harvests and withdraws deposited tokens from the pool.\r\n   */\r\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    let userInfo = await pool.userInfo(poolId, account);\r\n    return await pool.withdraw(poolId, userInfo.amount);\r\n  }\r\n\r\n  async fetchMasonryVersionOfUser(): Promise<string> {\r\n    return 'latest';\r\n  }\r\n\r\n  currentMasonry(): Contract {\r\n    if (!this.masonryVersionOfUser) {\r\n      //throw new Error('you must unlock the wallet to continue.');\r\n    }\r\n    return this.contracts.Masonry;\r\n  }\r\n\r\n  isOldMasonryMember(): boolean {\r\n    return this.masonryVersionOfUser !== 'latest';\r\n  }\r\n\r\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { chainId } = this.config;\r\n    const { WFTM } = this.config.externalTokens;\r\n\r\n    const wftm = new Token(chainId, WFTM[0], WFTM[1]);\r\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    try {\r\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\r\n      const priceInBUSD = new Route([wftmToToken], token);\r\n\r\n      return priceInBUSD.midPrice.toFixed(4);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { chainId } = this.config;\r\n\r\n    const { WFTM } = this.externalTokens;\r\n\r\n    const wftm = new TokenSpirit(chainId, WFTM.address, WFTM.decimal);\r\n    const token = new TokenSpirit(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    try {\r\n      const wftmToToken = await FetcherSpirit.fetchPairData(wftm, token, this.provider);\r\n      const liquidityToken = wftmToToken.liquidityToken;\r\n      let ftmBalanceInLP = await WFTM.balanceOf(liquidityToken.address);\r\n      let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, WFTM.decimal));\r\n      let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\r\n      let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\r\n      const priceOfOneFtmInDollars = await this.getWFTMPriceFromPancakeswap();\r\n      let priceOfShiba = (ftmAmount / shibaAmount) * Number(priceOfOneFtmInDollars);\r\n      return priceOfShiba.toString();\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getWFTMPriceFromPancakeswap(): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { WFTM, FUSDT } = this.externalTokens;\r\n    try {\r\n      const fusdt_wftm_lp_pair = this.externalTokens['USDT-FTM-LP'];\r\n      let ftm_amount_BN = await WFTM.balanceOf(fusdt_wftm_lp_pair.address);\r\n      let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, WFTM.decimal));\r\n      let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_wftm_lp_pair.address);\r\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\r\n      return (fusdt_amount / ftm_amount).toString();\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of WFTM: ${err}`);\r\n    }\r\n  }\r\n\r\n  //===================================================================\r\n  //===================================================================\r\n  //===================== MASONRY METHODS =============================\r\n  //===================================================================\r\n  //===================================================================\r\n\r\n  async getMasonryAPR() {\r\n    const Masonry = this.currentMasonry();\r\n    const latestSnapshotIndex = await Masonry.latestSnapshotIndex();\r\n    const lastHistory = await Masonry.boardroomHistory(latestSnapshotIndex);\r\n\r\n    const lastRewardsReceived = lastHistory[1];\r\n\r\n    const TSHAREPrice = (await this.getShareStat()).priceInDollars;\r\n    const TOMBPrice = (await this.getTombStat()).priceInDollars;\r\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\r\n\r\n    //Mgod formula\r\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(TOMBPrice) * 4;\r\n    const masonrytShareBalanceOf = await this.ASHARE.balanceOf(Masonry.address);\r\n    const masonryTVL = Number(getDisplayBalance(masonrytShareBalanceOf, this.ASHARE.decimal)) * Number(TSHAREPrice);\r\n    const realAPR = ((amountOfRewardsPerDay * 100) / masonryTVL) * 365;\r\n    return realAPR;\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Masonry\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserClaimRewardFromMasonry(): Promise<boolean> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.canClaimReward(this.myAccount);\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Masonry\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserUnstakeFromMasonry(): Promise<boolean> {\r\n    const Masonry = this.currentMasonry();\r\n    const canWithdraw = await Masonry.canWithdraw(this.myAccount);\r\n    const stakedAmount = await this.getStakedSharesOnMasonry();\r\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.ASHARE.decimal)) === 0;\r\n    const result = notStaked ? true : canWithdraw;\r\n    return result;\r\n  }\r\n\r\n  async timeUntilClaimRewardFromMasonry(): Promise<BigNumber> {\r\n    // const Masonry = this.currentMasonry();\r\n    // const mason = await Masonry.masons(this.myAccount);\r\n    return BigNumber.from(0);\r\n  }\r\n\r\n  async getTotalStakedInMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.totalSupply();\r\n  }\r\n\r\n  async stakeShareToMasonry(amount: string): Promise<TransactionResponse> {\r\n    if (this.isOldMasonryMember()) {\r\n      throw new Error(\"you're using old masonry. please withdraw and deposit the ASHARE again.\");\r\n    }\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.stake(decimalToBalance(amount));\r\n  }\r\n\r\n  async getStakedSharesOnMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.getShareOf(this.myAccount);\r\n    }\r\n    return await Masonry.balanceOf(this.myAccount);\r\n  }\r\n\r\n  async getEarningsOnMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.getCashEarningsOf(this.myAccount);\r\n    }\r\n    return await Masonry.earned(this.myAccount);\r\n  }\r\n\r\n  async withdrawShareFromMasonry(amount: string): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.withdraw(decimalToBalance(amount));\r\n  }\r\n\r\n  async harvestCashFromMasonry(): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.claimDividends();\r\n    }\r\n    return await Masonry.claimReward();\r\n  }\r\n\r\n  async exitFromMasonry(): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.exit();\r\n  }\r\n\r\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\r\n    const { Treasury } = this.contracts;\r\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\r\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\r\n    const prevAllocation = new Date(Date.now());\r\n\r\n    return { from: prevAllocation, to: nextAllocation };\r\n  }\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to claim\r\n   * their reward from the masonry\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\r\n    const { Masonry, Treasury } = this.contracts;\r\n    const nextEpochTimestamp = await Masonry.nextEpochPoint(); //in unix timestamp\r\n    const currentEpoch = await Masonry.epoch();\r\n    const mason = await Masonry.boards(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\r\n    const rewardLockupEpochs = await Masonry.rewardLockupEpochs();\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\r\n\r\n    const fromDate = new Date(Date.now());\r\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\r\n      return { from: fromDate, to: fromDate };\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return { from: fromDate, to: toDate };\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * periodInHours, 'hours')\r\n        .toDate();\r\n      return { from: fromDate, to: endDate };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to unstake\r\n   * from the masonry\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserUnstakeTime(): Promise<AllocationTime> {\r\n    const { Masonry, Treasury } = this.contracts;\r\n    const nextEpochTimestamp = await Masonry.nextEpochPoint();\r\n    const currentEpoch = await Masonry.epoch();\r\n    const mason = await Masonry.boards(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const PeriodInHours = period / 60 / 60;\r\n    const withdrawLockupEpochs = await Masonry.withdrawLockupEpochs();\r\n    const fromDate = new Date(Date.now());\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\r\n    const stakedAmount = await this.getStakedSharesOnMasonry();\r\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\r\n      return { from: fromDate, to: fromDate };\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return { from: fromDate, to: toDate };\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * PeriodInHours, 'hours')\r\n        .toDate();\r\n      return { from: fromDate, to: endDate };\r\n    }\r\n  }\r\n\r\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\r\n    const { ethereum } = window as any;\r\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\r\n      let asset;\r\n      let assetUrl;\r\n      if (assetName === 'APEX') {\r\n        asset = this.APEX;\r\n        assetUrl = 'https://tomb.finance/presskit/tomb_icon_noBG.png';\r\n      } else if (assetName === 'ASHARE') {\r\n        asset = this.ASHARE;\r\n        assetUrl = 'https://tomb.finance/presskit/tshare_icon_noBG.png';\r\n      } else if (assetName === 'ABOND') {\r\n        asset = this.ABOND;\r\n        assetUrl = 'https://tomb.finance/presskit/tbond_icon_noBG.png';\r\n      }\r\n      await ethereum.request({\r\n        method: 'wallet_watchAsset',\r\n        params: {\r\n          type: 'ERC20',\r\n          options: {\r\n            address: asset.address,\r\n            symbol: asset.symbol,\r\n            decimals: 18,\r\n            image: assetUrl,\r\n          },\r\n        },\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async provideTombFtmLP(ftmAmount: string, tombAmount: BigNumber): Promise<TransactionResponse> {\r\n    const { TaxOffice } = this.contracts;\r\n    let overrides = {\r\n      value: parseUnits(ftmAmount, 18),\r\n    };\r\n    return await TaxOffice.addLiquidityETHTaxFree(tombAmount, tombAmount.mul(992).div(1000), parseUnits(ftmAmount, 18).mul(992).div(1000), overrides);\r\n  }\r\n\r\n  async quoteFromSpooky(tokenAmount: string, tokenName: string): Promise<string> {\r\n    const { SpookyRouter } = this.contracts;\r\n    const { _reserve0, _reserve1 } = await this.TOMBWFTM_LP.getReserves();\r\n    let quote;\r\n    if (tokenName === 'APEX') {\r\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\r\n    } else {\r\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\r\n    }\r\n    return (quote / 1e18).toString();\r\n  }\r\n\r\n  /**\r\n   * @returns an array of the regulation events till the most up to date epoch\r\n   */\r\n  async listenForRegulationsEvents(): Promise<any> {\r\n    const { Treasury } = this.contracts;\r\n\r\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\r\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\r\n    const treasuryMasonryFundedFilter = Treasury.filters.MasonryFunded();\r\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\r\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\r\n\r\n    let epochBlocksRanges: any[] = [];\r\n    let masonryFundEvents = await Treasury.queryFilter(treasuryMasonryFundedFilter);\r\n    var events: any[] = [];\r\n    masonryFundEvents.forEach(function callback(value, index) {\r\n      events.push({ epoch: index + 1 });\r\n      events[index].masonryFund = getDisplayBalance(value.args[1]);\r\n      if (index === 0) {\r\n        epochBlocksRanges.push({\r\n          index: index,\r\n          startBlock: value.blockNumber,\r\n          boughBonds: 0,\r\n          redeemedBonds: 0,\r\n        });\r\n      }\r\n      if (index > 0) {\r\n        epochBlocksRanges.push({\r\n          index: index,\r\n          startBlock: value.blockNumber,\r\n          boughBonds: 0,\r\n          redeemedBonds: 0,\r\n        });\r\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\r\n      }\r\n    });\r\n\r\n    epochBlocksRanges.forEach(async (value, index) => {\r\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\r\n        boughtBondsFilter,\r\n        value.startBlock,\r\n        value.endBlock,\r\n      );\r\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\r\n        redeemBondsFilter,\r\n        value.startBlock,\r\n        value.endBlock,\r\n      );\r\n    });\r\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\r\n    DEVFundEvents.forEach(function callback(value, index) {\r\n      events[index].devFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\r\n    DAOFundEvents.forEach(function callback(value, index) {\r\n      events[index].daoFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    return events;\r\n  }\r\n\r\n  /**\r\n   * Helper method\r\n   * @param filter applied on the query to the treasury events\r\n   * @param from block number\r\n   * @param to block number\r\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\r\n   */\r\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\r\n    const { Treasury } = this.contracts;\r\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\r\n    return bondsAmount.length;\r\n  }\r\n\r\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\r\n    const { zapper } = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    let estimate;\r\n    if (tokenName === FTM_TICKER) {\r\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\r\n    } else {\r\n      const token = tokenName === TOMB_TICKER ? this.APEX : this.ASHARE;\r\n      estimate = await zapper.estimateZapInToken(\r\n        token.address,\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        parseUnits(amount, 18),\r\n      );\r\n    }\r\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\r\n  }\r\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\r\n    const { zapper } = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    if (tokenName === FTM_TICKER) {\r\n      let overrides = {\r\n        value: parseUnits(amount, 18),\r\n      };\r\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\r\n    } else {\r\n      const token = tokenName === TOMB_TICKER ? this.APEX : this.ASHARE;\r\n      return await zapper.zapInToken(\r\n        token.address,\r\n        parseUnits(amount, 18),\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        this.myAccount,\r\n      );\r\n    }\r\n  }\r\n  async swapTBondToTShare(tbondAmount: BigNumber): Promise<TransactionResponse> {\r\n    const { TShareSwapper } = this.contracts;\r\n    return await TShareSwapper.swapTBondToTShare(tbondAmount);\r\n  }\r\n  async estimateAmountOfTShare(tbondAmount: string): Promise<string> {\r\n    const { TShareSwapper } = this.contracts;\r\n    try {\r\n      const estimateBN = await TShareSwapper.estimateAmountOfTShare(parseUnits(tbondAmount, 18));\r\n      return getDisplayBalance(estimateBN, 18, 6);\r\n    } catch (err) {\r\n      console.error(`Failed to fetch estimate tshare amount: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTShareSwapperStat(address: string): Promise<TShareSwapperStat> {\r\n    const { TShareSwapper } = this.contracts;\r\n    const tshareBalanceBN = await TShareSwapper.getTShareBalance();\r\n    const tbondBalanceBN = await TShareSwapper.getTBondBalance(address);\r\n    // const tombPriceBN = await TShareSwapper.getTombPrice();\r\n    // const tsharePriceBN = await TShareSwapper.getTSharePrice();\r\n    const rateTSharePerTombBN = await TShareSwapper.getTShareAmountPerTomb();\r\n    const tshareBalance = getDisplayBalance(tshareBalanceBN, 18, 5);\r\n    const tbondBalance = getDisplayBalance(tbondBalanceBN, 18, 5);\r\n    return {\r\n      tshareBalance: tshareBalance.toString(),\r\n      tbondBalance: tbondBalance.toString(),\r\n      // tombPrice: tombPriceBN.toString(),\r\n      // tsharePrice: tsharePriceBN.toString(),\r\n      rateTSharePerTomb: rateTSharePerTombBN.toString(),\r\n    };\r\n  }\r\n}\r\n","import React, { createContext, useEffect, useState } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport TombFinance from '../../tomb-finance';\r\nimport config from '../../config';\r\n\r\nexport interface TombFinanceContext {\r\n  tombFinance?: TombFinance;\r\n}\r\n\r\nexport const Context = createContext<TombFinanceContext>({ tombFinance: null });\r\n\r\nexport const TombFinanceProvider: React.FC = ({ children }) => {\r\n  const { ethereum, account } = useWallet();\r\n  const [tombFinance, setTombFinance] = useState<TombFinance>();\r\n\r\n  useEffect(() => {\r\n    if (!tombFinance) {\r\n      const tomb = new TombFinance(config);\r\n      if (account) {\r\n        // wallet was unlocked at initialization\r\n        tomb.unlockWallet(ethereum, account);\r\n      }\r\n      setTombFinance(tomb);\r\n    } else if (account) {\r\n      tombFinance.unlockWallet(ethereum, account);\r\n    }\r\n  }, [account, ethereum, tombFinance]);\r\n\r\n  return <Context.Provider value={{ tombFinance }}>{children}</Context.Provider>;\r\n};\r\n","import { useContext } from 'react';\r\nimport { Context } from '../contexts/TombFinanceProvider';\r\n\r\nconst useTombFinance = () => {\r\n  const { tombFinance } = useContext(Context);\r\n  return tombFinance;\r\n};\r\n\r\nexport default useTombFinance;\r\n","import { createContext } from 'react';\r\nimport { Bank } from '../../tomb-finance';\r\n\r\nexport interface BanksContext {\r\n  banks: Bank[];\r\n}\r\n\r\nconst context = createContext<BanksContext>({\r\n  banks: [],\r\n});\r\n\r\nexport default context;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport Context from './context';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\nimport { Bank } from '../../tomb-finance';\r\nimport config, { bankDefinitions } from '../../config';\r\n\r\nconst Banks: React.FC = ({ children }) => {\r\n  const [banks, setBanks] = useState<Bank[]>([]);\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchPools = useCallback(async () => {\r\n    const banks: Bank[] = [];\r\n\r\n    for (const bankInfo of Object.values(bankDefinitions)) {\r\n      if (bankInfo.finished) {\r\n        if (!tombFinance.isUnlocked) continue;\r\n\r\n        // only show pools staked by user\r\n        const balance = await tombFinance.stakedBalanceOnBank(\r\n          bankInfo.contract,\r\n          bankInfo.poolId,\r\n          tombFinance.myAccount,\r\n        );\r\n        if (balance.lte(0)) {\r\n          continue;\r\n        }\r\n      }\r\n      banks.push({\r\n        ...bankInfo,\r\n        address: config.deployments[bankInfo.contract].address,\r\n        depositToken: tombFinance.externalTokens[bankInfo.depositTokenName],\r\n        earnToken: bankInfo.earnTokenName === 'APEX' ? tombFinance.APEX : tombFinance.ASHARE,\r\n      });\r\n    }\r\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\r\n    setBanks(banks);\r\n  }, [tombFinance, setBanks]);\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      fetchPools().catch((err) => console.error(`Failed to fetch pools: ${err.stack}`));\r\n    }\r\n  }, [isUnlocked, tombFinance, fetchPools]);\r\n\r\n  return <Context.Provider value={{ banks }}>{children}</Context.Provider>;\r\n};\r\n\r\nexport default Banks;\r\n","import { BigNumber } from 'ethers';\r\n\r\nexport const getDisplayBalance = (\r\n  balance: BigNumber,\r\n  decimals = 18,\r\n  fractionDigits = 4,\r\n  isTruncated: boolean = false,\r\n) => {\r\n  if (decimals === 0) {\r\n    fractionDigits = 0;\r\n  }\r\n  const number = getBalance(balance, decimals - fractionDigits);\r\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\r\n  if (ret.length > 12 && isTruncated) {\r\n    return ret.slice(0, 12) + '...';\r\n  }\r\n  return ret;\r\n};\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, isTruncated = false) => {\r\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\r\n};\r\n\r\nexport function getBalance(balance: BigNumber, decimals = 18): number {\r\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\r\n}\r\n","import React, { createContext, useCallback, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ModalsContext {\r\n  content?: React.ReactNode;\r\n  isOpen?: boolean;\r\n  onPresent: (content: React.ReactNode) => void;\r\n  onDismiss: () => void;\r\n}\r\n\r\nexport const Context = createContext<ModalsContext>({\r\n  onPresent: () => {},\r\n  onDismiss: () => {},\r\n});\r\n\r\nconst Modals: React.FC = ({ children }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [content, setContent] = useState<React.ReactNode>();\r\n\r\n  const handlePresent = useCallback(\r\n    (modalContent: React.ReactNode) => {\r\n      setContent(modalContent);\r\n      setIsOpen(true);\r\n    },\r\n    [setContent, setIsOpen],\r\n  );\r\n\r\n  const handleDismiss = useCallback(() => {\r\n    setContent(undefined);\r\n    setIsOpen(false);\r\n  }, [setContent, setIsOpen]);\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        content,\r\n        isOpen,\r\n        onPresent: handlePresent,\r\n        onDismiss: handleDismiss,\r\n      }}\r\n    >\r\n      {children}\r\n      {isOpen && (\r\n        <StyledModalWrapper>\r\n          <StyledModalBackdrop onClick={handleDismiss} />\r\n          {React.isValidElement(content) &&\r\n            React.cloneElement(content, {\r\n              onDismiss: handleDismiss,\r\n            })}\r\n        </StyledModalWrapper>\r\n      )}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nconst StyledModalWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nconst StyledModalBackdrop = styled.div`\r\n  background-color: #00000088;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nexport default Modals;\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nexport const RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nexport const RefreshContextProvider: React.FC = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => { \r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\n","// import { ChainId } from '@pancakeswap-libs/sdk';\r\nimport { ChainId } from '@spookyswap/sdk';\r\nimport { Configuration } from './tomb-finance/config';\r\nimport { BankInfo } from './tomb-finance';\r\n\r\nconst configurations: { [env: string]: Configuration } = {\r\n  // development: {\r\n  //   chainId: ChainId.FTMTESTNET,\r\n  //   networkName: 'Fantom Opera Testnet',\r\n  //   ftmscanUrl: 'https://testnet.ftmscan.com',\r\n  //   defaultProvider: 'https://rpc.testnet.fantom.network/',\r\n  //   deployments: require('./tomb-finance/deployments/deployments.testing.json'),\r\n  //   externalTokens: {\r\n  //     WFTM: ['0xf1277d1ed8ad466beddf92ef448a132661956621', 18],\r\n  //     FUSDT: ['0xb7f24e6e708eabfaa9e64b40ee21a5adbffb51d6', 6],\r\n  //     BOO: ['0x14f0C98e6763a5E13be5CE014d36c2b69cD94a1e', 18],\r\n  //     ZOO: ['0x2317610e609674e53D9039aaB85D8cAd8485A7c5', 0],\r\n  //     SHIBA: ['0x39523112753956d19A3d6a30E758bd9FF7a8F3C0', 9],\r\n  //     'USDT-FTM-LP': ['0xE7e3461C2C03c18301F66Abc9dA1F385f45047bA', 18],\r\n  //     'STONE-FTM-LP': ['0x13Fe199F19c8F719652985488F150762A5E9c3A8', 18],\r\n  //     'SSHARE-FTM-LP': ['0x20bc90bB41228cb9ab412036F80CE4Ef0cAf1BD5', 18],\r\n  //   },\r\n  //   baseLaunchDate: new Date('2021-06-02 13:00:00Z'),\r\n  //   bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\r\n  //   masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\r\n  //   refreshInterval: 10000,\r\n  // },\r\n  development: {\r\n    chainId: ChainId.MAINNET,\r\n    networkName: 'Fantom Opera Mainnet',\r\n    ftmscanUrl: 'https://ftmscan.com',\r\n    defaultProvider: 'https://rpc.ftm.tools/',\r\n    deployments: require('./tomb-finance/deployments/deployments.mainnet.json'),\r\n    externalTokens: {\r\n      WFTM: ['0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83', 18],\r\n      FUSDT: ['0x04068DA6C83AFCFA0e13ba15A6696662335D5B75', 6], // This is actually usdc on mainnet not fusdt\r\n      BOO: ['0x841FAD6EAe12c286d1Fd18d1d525DFfA75C7EFFE', 18],\r\n      ZOO: ['0x09e145a1d53c0045f41aeef25d8ff982ae74dd56', 0],\r\n      SHIBA: ['0x9ba3e4f84a34df4e08c112e1a0ff148b81655615', 9],\r\n      'USDT-FTM-LP': ['0x2b4C76d0dc16BE1C31D4C1DC53bF9B45987Fc75c', 18],\r\n      'STONE-FTM-LP': ['0x78e7743bA9b517fe4737DAa64687900790793D26', 18],\r\n      'SSHARE-FTM-LP': ['0x7Ff074fdc6F5831538902516CCCAD0ae63c8914b', 18],\r\n    },\r\n    baseLaunchDate: new Date('2021-06-02 13:00:00Z'),\r\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\r\n    masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\r\n    refreshInterval: 10000,\r\n  },\r\n  production: {\r\n    chainId: ChainId.MAINNET,\r\n    networkName: 'Fantom Opera Mainnet',\r\n    ftmscanUrl: 'https://ftmscan.com',\r\n    defaultProvider: 'https://rpc.ftm.tools/',\r\n    deployments: require('./tomb-finance/deployments/deployments.mainnet.json'),\r\n    externalTokens: {\r\n      WFTM: ['0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83', 18],\r\n      FUSDT: ['0x04068DA6C83AFCFA0e13ba15A6696662335D5B75', 6], // This is actually usdc on mainnet not fusdt\r\n      BOO: ['0x841FAD6EAe12c286d1Fd18d1d525DFfA75C7EFFE', 18],\r\n      ZOO: ['0x09e145a1d53c0045f41aeef25d8ff982ae74dd56', 0],\r\n      SHIBA: ['0x9ba3e4f84a34df4e08c112e1a0ff148b81655615', 9],\r\n      'USDT-FTM-LP': ['0x2b4C76d0dc16BE1C31D4C1DC53bF9B45987Fc75c', 18],\r\n      'STONE-FTM-LP': ['0x78e7743bA9b517fe4737DAa64687900790793D26', 18],\r\n      'SSHARE-FTM-LP': ['0x7Ff074fdc6F5831538902516CCCAD0ae63c8914b', 18],\r\n    },\r\n    baseLaunchDate: new Date('2022-03-02 13:00:00Z'),\r\n    bondLaunchesAt: new Date('2022-02-03T15:00:00Z'),\r\n    masonryLaunchesAt: new Date('2022-02-11T00:00:00Z'),\r\n    refreshInterval: 10000,\r\n  },\r\n};\r\n\r\nexport const bankDefinitions: { [contractName: string]: BankInfo } = {\r\n  /*\r\n  Explanation:\r\n  name: description of the card\r\n  poolId: the poolId assigned in the contract\r\n  sectionInUI: way to distinguish in which of the 3 pool groups it should be listed\r\n        - 0 = Single asset stake pools\r\n        - 1 = LP asset staking rewarding APEX\r\n        - 2 = LP asset staking rewarding ASHARE\r\n  contract: the contract name which will be loaded from the deployment.environmnet.json\r\n  depositTokenName : the name of the token to be deposited\r\n  earnTokenName: the rewarded token\r\n  finished: will disable the pool on the UI if set to true\r\n  sort: the order of the pool\r\n  */\r\n  ApexFtmRewardPool: {\r\n    name: 'Earn APEX by FTM',\r\n    poolId: 0,\r\n    sectionInUI: 0,\r\n    contract: 'ApexFtmRewardPool',\r\n    depositTokenName: 'WFTM',\r\n    earnTokenName: 'APEX',\r\n    finished: false,\r\n    sort: 1,\r\n    closedForStaking: false,\r\n  },\r\n  ApexBooRewardPool: {\r\n    name: 'Earn APEX by BOO',\r\n    poolId: 1,\r\n    sectionInUI: 0,\r\n    contract: 'ApexBooGenesisRewardPool',\r\n    depositTokenName: 'BOO',\r\n    earnTokenName: 'APEX',\r\n    finished: false,\r\n    sort: 2,\r\n    closedForStaking: false,\r\n  },\r\n  ApexShibaRewardPool: {\r\n    name: 'Earn APEX by SHIBA',\r\n    poolId: 2,\r\n    sectionInUI: 0,\r\n    contract: 'ApexShibaGenesisRewardPool',\r\n    depositTokenName: 'SHIBA',\r\n    earnTokenName: 'APEX',\r\n    finished: false,\r\n    sort: 3,\r\n    closedForStaking: false,\r\n  },\r\n  ApexZooRewardPool: {\r\n    name: 'Earn APEX by ZOO',\r\n    poolId: 3,\r\n    sectionInUI: 0,\r\n    contract: 'ApexZooGenesisRewardPool',\r\n    depositTokenName: 'ZOO',\r\n    earnTokenName: 'APEX',\r\n    finished: false,\r\n    sort: 4,\r\n    closedForStaking: false,\r\n  },\r\n  ApexFtmLPApexRewardPool: {\r\n    name: 'Earn APEX by APEX-FTM LP',\r\n    poolId: 0,\r\n    sectionInUI: 1,\r\n    contract: 'ApexFtmLPApexRewardPool',\r\n    depositTokenName: 'STONE-FTM-LP',\r\n    earnTokenName: 'APEX',\r\n    finished: false,\r\n    sort: 5,\r\n    closedForStaking: false,\r\n  },\r\n  ApexFtmLPApexRewardPoolOld: {\r\n    name: 'Earn APEX by APEX-FTM LP',\r\n    poolId: 0,\r\n    sectionInUI: 1,\r\n    contract: 'ApexFtmLPApexRewardPoolOld',\r\n    depositTokenName: 'STONE-FTM-LP',\r\n    earnTokenName: 'APEX',\r\n    finished: true,\r\n    sort: 9,\r\n    closedForStaking: false,\r\n  },\r\n  ApexFtmLPAShareRewardPool: {\r\n    name: 'Earn ASHARE by APEX-FTM LP',\r\n    poolId: 0,\r\n    sectionInUI: 2,\r\n    contract: 'ApexFtmLPAShareRewardPool',\r\n    depositTokenName: 'STONE-FTM-LP',\r\n    earnTokenName: 'ASHARE',\r\n    finished: false,\r\n    sort: 6,\r\n    closedForStaking: false,\r\n  },\r\n  AshareFtmLPAShareRewardPool: {\r\n    name: 'Earn ASHARE by ASHARE-FTM LP',\r\n    poolId: 1,\r\n    sectionInUI: 2,\r\n    contract: 'AshareFtmLPAShareRewardPool',\r\n    depositTokenName: 'SSHARE-FTM-LP',\r\n    earnTokenName: 'ASHARE',\r\n    finished: false,\r\n    sort: 7,\r\n    closedForStaking: false,\r\n  },\r\n};\r\n\r\nexport default configurations[process.env.NODE_ENV || 'development'];\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport type PopupContent = {\r\n  txn?: {\r\n    hash: string;\r\n    success: boolean;\r\n    summary?: string;\r\n  };\r\n  error?: {\r\n    message: string;\r\n    stack: string;\r\n  };\r\n};\r\n\r\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>('app/updateBlockNumber');\r\n\r\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\r\n\r\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\r\n\r\nexport const addPopup = createAction<{\r\n  key?: string;\r\n  removeAfterMs?: number | null;\r\n  content: PopupContent;\r\n}>('app/addPopup');\r\n\r\nexport const removePopup = createAction<{ key: string }>('app/removePopup');\r\n","import { useEffect, useState } from 'react';\r\nimport config from './../config';\r\n\r\nconst usePromptNetwork = () => {\r\n  const [networkPrompt, setNetworkPrompt] = useState(false);\r\n  const { ethereum } = window as any;\r\n\r\n  /**\r\n   * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\r\n   * And https://docs.metamask.io/guide/ethereum-provider.html\r\n   * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\r\n   * @returns\r\n   */\r\n  const connectToNetwork = async (provider: any) => {\r\n    await provider.request({\r\n      method: 'wallet_addEthereumChain',\r\n      params: [\r\n        {\r\n          chainId: `0x${config.chainId.toString(16)}`,\r\n          chainName: config.networkName,\r\n          nativeCurrency: {\r\n            name: 'FTM',\r\n            symbol: 'ftm',\r\n            decimals: 18,\r\n          },\r\n          rpcUrls: [config.defaultProvider],\r\n          blockExplorerUrls: [config.ftmscanUrl],\r\n        },\r\n      ],\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    if (!networkPrompt) {\r\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\r\n        connectToNetwork(ethereum);\r\n        setNetworkPrompt(true);\r\n      }\r\n    }\r\n  }, [networkPrompt, ethereum]);\r\n};\r\n\r\nexport default usePromptNetwork;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from './actions';\r\n\r\nconst now = () => new Date().getTime();\r\n\r\nexport interface TransactionDetails {\r\n  hash: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  summary?: string;\r\n  receipt?: SerializableTransactionReceipt;\r\n  lastCheckedBlockNumber?: number;\r\n  addedTime: number;\r\n  confirmedTime?: number;\r\n  from: string;\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails;\r\n  };\r\n}\r\n\r\nexport const initialState: TransactionState = {};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary } }) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.');\r\n      }\r\n      const txs = transactions[chainId] ?? {};\r\n      txs[hash] = { hash, approval, summary, from, addedTime: now() };\r\n      transactions[chainId] = txs;\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\r\n      if (!transactions[chainId]) return;\r\n      transactions[chainId] = {};\r\n    })\r\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber;\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      tx.receipt = receipt;\r\n      tx.confirmedTime = now();\r\n    }),\r\n);\r\n","import { createReducer, nanoid } from '@reduxjs/toolkit';\r\nimport {\r\n  addPopup,\r\n  PopupContent,\r\n  removePopup,\r\n  toggleWalletModal,\r\n  toggleSettingsMenu,\r\n  updateBlockNumber,\r\n} from './actions';\r\n\r\ntype PopupList = Array<{\r\n  key: string;\r\n  show: boolean;\r\n  content: PopupContent;\r\n  removeAfterMs: number | null;\r\n}>;\r\n\r\nexport interface ApplicationState {\r\n  blockNumber: { [chainId: number]: number };\r\n  popupList: PopupList;\r\n  walletModalOpen: boolean;\r\n  settingsMenuOpen: boolean;\r\n}\r\n\r\nconst initialState: ApplicationState = {\r\n  blockNumber: {},\r\n  popupList: [],\r\n  walletModalOpen: false,\r\n  settingsMenuOpen: false,\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(updateBlockNumber, (state, action) => {\r\n      const { chainId, blockNumber } = action.payload;\r\n      if (typeof state.blockNumber[chainId] !== 'number') {\r\n        state.blockNumber[chainId] = blockNumber;\r\n      } else {\r\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\r\n      }\r\n    })\r\n    .addCase(toggleWalletModal, (state) => {\r\n      state.walletModalOpen = !state.walletModalOpen;\r\n    })\r\n    .addCase(toggleSettingsMenu, (state) => {\r\n      state.settingsMenuOpen = !state.settingsMenuOpen;\r\n    })\r\n    .addCase(addPopup, (state, { payload: { content, key, removeAfterMs = 15000 } }) => {\r\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\r\n        {\r\n          key: key || nanoid(),\r\n          show: true,\r\n          content,\r\n          removeAfterMs,\r\n        },\r\n      ]);\r\n    })\r\n    .addCase(removePopup, (state, { payload: { key } }) => {\r\n      state.popupList.forEach((p) => {\r\n        if (p.key === key) {\r\n          p.show = false;\r\n        }\r\n      });\r\n    }),\r\n);\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { save, load } from 'redux-localstorage-simple';\r\nimport transactions from './transactions/reducer';\r\nimport application from './application/reducer';\r\n\r\nconst PERSISTED_KEYS: string[] = ['transactions'];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    application,\r\n    transactions,\r\n  },\r\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\r\n  preloadedState: load({ states: PERSISTED_KEYS }),\r\n});\r\n\r\nexport default store;\r\n\r\nexport type AppState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","export const white = '#FFF';\r\nexport const black = '#000';\r\n\r\nexport const green = {\r\n  500: '#00D110',\r\n};\r\n\r\nexport const purple = {\r\n  200: '#bd7cfe',\r\n  400: '#ab47bc',\r\n  700: '#7b1fa2',\r\n};\r\n\r\nexport const red = {\r\n  100: '#C1C1FF',\r\n  200: '#7575FF',\r\n  500: '#fff',\r\n};\r\n\r\nexport const grey = {\r\n  100: '#f5f5f5',\r\n  200: '#eeeeee',\r\n  300: '#e0e0e0',\r\n  400: '#bdbdbd',\r\n  500: '#9e9e9e',\r\n  600: '#757575',\r\n  700: '#616161',\r\n  800: '#424242',\r\n  900: '#212121',\r\n};\r\n\r\nexport const bg = '#000000';\r\n\r\nexport const teal = {\r\n  200: '#64ffda',\r\n};\r\n","import { black, purple, teal, grey, red, white } from './colors';\r\n\r\nconst theme = {\r\n  borderRadius: 12,\r\n  color: {\r\n    black,\r\n    grey,\r\n    purple,\r\n    primary: {\r\n      light: red[200],\r\n      main: red[500],\r\n    },\r\n    secondary: {\r\n      main: teal[200],\r\n    },\r\n    white,\r\n    teal,\r\n  },\r\n  siteWidth: 1200,\r\n  spacing: {\r\n    1: 4,\r\n    2: 8,\r\n    3: 16,\r\n    4: 24,\r\n    5: 32,\r\n    6: 48,\r\n    7: 64,\r\n  },\r\n  topBarSize: 72,\r\n};\r\n\r\nexport default theme;\r\n","//Your theme for the new stuff using material UI has been copied here so it doesn't conflict\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst newTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n    text: {\r\n      primary: '#00ffc3',\r\n    },\r\n    background: {\r\n      default: '#121212',\r\n      paper: 'rgba(255, 255, 255, 0.9)',\r\n    },\r\n    primary: {\r\n      light: '#757ce8',\r\n      main: '#00FFC3',\r\n      dark: '#9a9cab',\r\n      contrastText: '#000',\r\n    },\r\n    secondary: {\r\n      light: '#ff7961',\r\n      main: '#f44336',\r\n      dark: '#ba000d',\r\n      contrastText: '#000',\r\n    },\r\n    action: {\r\n      disabledBackground: '#CDCDCD',\r\n      active: '#000',\r\n      hover: '#000',\r\n    },\r\n  },\r\n  typography: {\r\n    color: '#9a9cab',\r\n    fontFamily: ['\"Poppins\"', 'sans-serif'].join(','),\r\n  },\r\n});\r\n\r\nexport default newTheme;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\r\n\r\nfunction isWindowVisible() {\r\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\r\n}\r\n\r\n/**\r\n * Returns whether the window is currently visible to the user.\r\n */\r\nexport default function useIsWindowVisible(): boolean {\r\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\r\n  const listener = useCallback(() => {\r\n    setFocused(isWindowVisible());\r\n  }, [setFocused]);\r\n\r\n  useEffect(() => {\r\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\r\n\r\n    document.addEventListener('visibilitychange', listener);\r\n    return () => {\r\n      document.removeEventListener('visibilitychange', listener);\r\n    };\r\n  }, [listener]);\r\n\r\n  return focused;\r\n}\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\nimport useDebounce from '../../hooks/useDebounce';\r\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\r\nimport { updateBlockNumber } from './actions';\r\nimport { getDefaultProvider } from '../../utils/provider';\r\n\r\nexport default function Updater(): null {\r\n  const { ethereum, chainId } = useWallet();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const windowVisible = useIsWindowVisible();\r\n\r\n  const [state, setState] = useState<{\r\n    chainId: number | undefined;\r\n    blockNumber: number | null;\r\n  }>({\r\n    chainId,\r\n    blockNumber: null,\r\n  });\r\n\r\n  const blockNumberCallback = useCallback(\r\n    (blockNumber: number) => {\r\n      setState((state) => {\r\n        if (chainId === state.chainId) {\r\n          if (typeof state.blockNumber !== 'number') return { chainId, blockNumber };\r\n          return { chainId, blockNumber: Math.max(blockNumber, state.blockNumber) };\r\n        }\r\n        return state;\r\n      });\r\n    },\r\n    [chainId, setState],\r\n  );\r\n\r\n  // attach/detach listeners\r\n  // @ts-ignore\r\n  useEffect(() => {\r\n    if (!ethereum || !chainId || !windowVisible) return undefined;\r\n    setState({ chainId, blockNumber: null });\r\n\r\n    const provider = getDefaultProvider();\r\n    provider\r\n      .getBlockNumber()\r\n      .then(blockNumberCallback)\r\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error));\r\n\r\n    provider.on('block', blockNumberCallback);\r\n    return () => provider.removeListener('block', blockNumberCallback);\r\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\r\n\r\n  const debouncedState = useDebounce(state, 100);\r\n\r\n  useEffect(() => {\r\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\r\n    dispatch(\r\n      updateBlockNumber({\r\n        chainId: debouncedState.chainId,\r\n        blockNumber: debouncedState.blockNumber,\r\n      }),\r\n    );\r\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\r\n\r\n  return null;\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\nexport default function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { checkedTransaction, finalizeTransaction } from './actions';\r\nimport { getDefaultProvider } from '../../utils/provider';\r\n\r\nexport function shouldCheck(\r\n  lastBlockNumber: number,\r\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\r\n): boolean {\r\n  if (tx.receipt) return false;\r\n  if (!tx.lastCheckedBlockNumber) return true;\r\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\r\n  if (blocksSinceCheck < 1) return false;\r\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\r\n  if (minutesPending > 60) {\r\n    // every 10 blocks if pending for longer than an hour\r\n    return blocksSinceCheck > 9;\r\n  } else if (minutesPending > 5) {\r\n    // every 3 blocks if pending more than 5 minutes\r\n    return blocksSinceCheck > 2;\r\n  } else {\r\n    // otherwise every block\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const { chainId, ethereum } = useWallet();\r\n\r\n  const lastBlockNumber = useBlockNumber();\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\r\n\r\n  const transactions = chainId ? state[chainId] ?? {} : {};\r\n\r\n  // show popup on confirm\r\n  const addPopup = useAddPopup();\r\n\r\n  useEffect(() => {\r\n    if (!chainId || !ethereum || !lastBlockNumber) {\r\n      return;\r\n    }\r\n\r\n    const provider = getDefaultProvider();\r\n    Object.keys(transactions)\r\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\r\n      .forEach((hash) => {\r\n        provider\r\n          .getTransactionReceipt(hash)\r\n          .then((receipt) => {\r\n            if (receipt) {\r\n              dispatch(\r\n                finalizeTransaction({\r\n                  chainId,\r\n                  hash,\r\n                  receipt: {\r\n                    blockHash: receipt.blockHash,\r\n                    blockNumber: receipt.blockNumber,\r\n                    contractAddress: receipt.contractAddress,\r\n                    from: receipt.from,\r\n                    status: receipt.status,\r\n                    to: receipt.to,\r\n                    transactionHash: receipt.transactionHash,\r\n                    transactionIndex: receipt.transactionIndex,\r\n                  },\r\n                }),\r\n              );\r\n\r\n              addPopup(\r\n                {\r\n                  txn: {\r\n                    hash,\r\n                    success: receipt.status === 1,\r\n                    summary: transactions[hash]?.summary,\r\n                  },\r\n                },\r\n                hash,\r\n              );\r\n            } else {\r\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }));\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(`failed to check transaction hash: ${hash}`, error);\r\n          });\r\n      });\r\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\r\n\r\n  return null;\r\n}\r\n","import React from 'react';\r\nimport ApplicationUpdater from './application/updater';\r\nimport TransactionUpdater from './transactions/updater';\r\n\r\nconst Updaters = () => (\r\n  <>\r\n    <ApplicationUpdater />\r\n    <TransactionUpdater />\r\n  </>\r\n);\r\n\r\nexport default Updaters;\r\n","import Loader from './Loader';\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n      }}\r\n    >\r\n      <Typography>Loading</Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useContext } from 'react';\r\nimport { AlertCircle, CheckCircle } from 'react-feather';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { useWallet } from 'use-wallet';\r\nimport config from '../../config';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function TransactionPopup({\r\n  hash,\r\n  success,\r\n  summary,\r\n}: {\r\n  hash: string;\r\n  success?: boolean;\r\n  summary?: string;\r\n}) {\r\n  const { chainId } = useWallet();\r\n  const theme = useContext(ThemeContext);\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{ paddingRight: 16 }}>\r\n        {success ? <CheckCircle color={theme.color.teal[200]} size={24} /> : <AlertCircle color=\"#FF6871\" size={24} />}\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{summary ?? 'Hash: ' + hash.slice(0, 8) + '...' + hash.slice(58, 65)}</StyledPopupDesc>\r\n        {chainId && (\r\n          <StyledLink target=\"_blank\" href={`${config.ftmscanUrl}/tx/${hash}`}>\r\n            View on Ftmscan\r\n          </StyledLink>\r\n        )}\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, { useCallback } from 'react';\r\nimport { AlertCircle } from 'react-feather';\r\nimport styled from 'styled-components';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function ErrorPopup({ message, stack }: { message: string; stack: string }) {\r\n  const copyErrorDetails = useCallback(async () => {\r\n    await navigator.clipboard.writeText(`${message}\\n${stack}`);\r\n  }, [message, stack]);\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{ paddingRight: 16 }}>\r\n        <AlertCircle color=\"#FF6871\" size={24} />\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{message}</StyledPopupDesc>\r\n        <StyledLink onClick={copyErrorDetails} href=\"#\">\r\n          Copy error details\r\n        </StyledLink>\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, { useCallback, useContext, useEffect } from 'react';\r\nimport { X } from 'react-feather';\r\nimport { useSpring } from 'react-spring/web';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { animated } from 'react-spring';\r\nimport { PopupContent } from '../../state/application/actions';\r\nimport { useRemovePopup } from '../../state/application/hooks';\r\nimport TransactionPopup from './TransactionPopup';\r\nimport ErrorPopup from './ErrorPopup';\r\n\r\nexport const StyledClose = styled(X)`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 10px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\nexport const Popup = styled.div`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 1em;\r\n  background-color: ${({ theme }) => theme.color.grey[700]};\r\n  position: relative;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  padding-right: 35px;\r\n  overflow: hidden;\r\n\r\n  @media (max-width: 768px) {\r\n    min-width: 290px;\r\n  }\r\n`;\r\nconst Fader = styled.div`\r\n  position: absolute;\r\n  bottom: 0px;\r\n  left: 0px;\r\n  width: 100%;\r\n  height: 2px;\r\n  background-color: ${({ theme }) => theme.color.grey[400]};\r\n`;\r\n\r\nconst AnimatedFader = animated(Fader);\r\n\r\nexport default function PopupItem({\r\n  removeAfterMs,\r\n  content,\r\n  popKey,\r\n}: {\r\n  removeAfterMs: number | null;\r\n  content: PopupContent;\r\n  popKey: string;\r\n}) {\r\n  const removePopup = useRemovePopup();\r\n  const removeThisPopup = useCallback(() => removePopup(popKey), [popKey, removePopup]);\r\n  useEffect(() => {\r\n    if (removeAfterMs === null) return undefined;\r\n\r\n    const timeout = setTimeout(() => {\r\n      removeThisPopup();\r\n    }, removeAfterMs);\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [removeAfterMs, removeThisPopup]);\r\n\r\n  const theme = useContext(ThemeContext);\r\n\r\n  let popupContent;\r\n  if ('txn' in content) {\r\n    const {\r\n      txn: { hash, success, summary },\r\n    } = content;\r\n    popupContent = <TransactionPopup hash={hash} success={success} summary={summary} />;\r\n  }\r\n  if ('error' in content) {\r\n    const {\r\n      error: { message, stack },\r\n    } = content;\r\n    popupContent = <ErrorPopup message={message} stack={stack} />;\r\n  }\r\n\r\n  const faderStyle = useSpring({\r\n    from: { width: '100%' },\r\n    to: { width: '0%' },\r\n    config: { duration: removeAfterMs ?? undefined },\r\n  });\r\n\r\n  return (\r\n    <Popup>\r\n      <StyledClose color={theme.text2} onClick={removeThisPopup} />\r\n      {popupContent}\r\n      {removeAfterMs !== null ? <AnimatedFader style={faderStyle} /> : null}\r\n    </Popup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useActivePopups } from '../../state/application/hooks';\r\nimport PopupItem from './PopupItem';\r\n\r\nconst MobilePopupWrapper = styled.div<{ height: string | number }>`\r\n  position: relative;\r\n  max-width: 100%;\r\n  height: ${({ height }) => height};\r\n  margin: ${({ height }) => (height ? '0 auto;' : 0)};\r\n  margin-bottom: ${({ height }) => (height ? '20px' : 0)}};\r\n\r\n  display: none;\r\n  @media (max-width: 768px) {\r\n    display: block;\r\n  };\r\n`;\r\n\r\nconst MobilePopupInner = styled.div`\r\n  height: 99%;\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n  display: flex;\r\n  flex-direction: row;\r\n  -webkit-overflow-scrolling: touch;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst FixedPopupColumn = styled.div`\r\n  position: fixed;\r\n  top: 64px;\r\n  margin-right: 24px;\r\n  right: 3rem;\r\n  max-width: 355px !important;\r\n  width: 100%;\r\n  z-index: 2;\r\n\r\n  @media (max-width: 768px) {\r\n    display: none;\r\n  } ;\r\n`;\r\n\r\nexport default function Popups() {\r\n  // get all popups\r\n  const activePopups = useActivePopups();\r\n\r\n  return (\r\n    <>\r\n      <FixedPopupColumn>\r\n        {activePopups.map((item) => (\r\n          <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n        ))}\r\n      </FixedPopupColumn>\r\n      <MobilePopupWrapper height={activePopups?.length > 0 ? 'fit-content' : 0}>\r\n        <MobilePopupInner>\r\n          {activePopups // reverse so new items up front\r\n            .slice(0)\r\n            .reverse()\r\n            .map((item) => (\r\n              <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n            ))}\r\n        </MobilePopupInner>\r\n      </MobilePopupWrapper>\r\n    </>\r\n  );\r\n}\r\n","import React, { Suspense, lazy } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { ThemeProvider as TP } from '@material-ui/core/styles';\r\nimport { ThemeProvider as TP1 } from 'styled-components';\r\nimport { UseWalletProvider } from 'use-wallet';\r\nimport usePromptNetwork from './hooks/useNetworkPrompt';\r\nimport BanksProvider from './contexts/Banks';\r\nimport TombFinanceProvider from './contexts/TombFinanceProvider';\r\nimport ModalsProvider from './contexts/Modals';\r\nimport store from './state';\r\nimport theme from './theme';\r\nimport newTheme from './newTheme';\r\nimport config from './config';\r\nimport Updaters from './state/Updaters';\r\nimport Loader from './components/Loader';\r\nimport Popups from './components/Popups';\r\nimport Regulations from './views/Regulations/Regulations';\r\nimport { RefreshContextProvider } from './contexts/RefreshContext';\r\n\r\nconst Home = lazy(() => import('./views/Home'));\r\nconst Staking = lazy(() => import('./views/Staking'));\r\nconst Boardroom = lazy(() => import('./views/Boardroom'));\r\nconst Bonds = lazy(() => import('./views/Bonds'));\r\nconst SBS = lazy(() => import('./views/Sbs'));\r\nconst Liquidity = lazy(() => import('./views/Liquidity'));\r\n\r\nconst NoMatch = () => (\r\n  <h3 style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\r\n    URL Not Found. <a href=\"/\">Go back home.</a>\r\n  </h3>\r\n);\r\n\r\nconst App: React.FC = () => {\r\n  // Clear localStorage for mobile users\r\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.1') {\r\n    localStorage.clear();\r\n    localStorage.setItem('connectorId', '');\r\n    localStorage.setItem('version_app', '1.1');\r\n  }\r\n\r\n  usePromptNetwork();\r\n\r\n  return (\r\n    <Providers>\r\n      <Router>\r\n        <Suspense fallback={<Loader />}>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/staking\">\r\n              <Staking />\r\n            </Route>\r\n            <Route path=\"/boardroom\">\r\n              <Boardroom />\r\n            </Route>\r\n            <Route path=\"/bonds\">\r\n              <Bonds />\r\n            </Route>\r\n            {/* <Route path=\"/sbs\">\r\n              <SBS />\r\n            </Route>\r\n            <Route path=\"/regulations\">\r\n              <Regulations />\r\n            </Route>\r\n            <Route path=\"/liquidity\">\r\n              <Liquidity />\r\n            </Route> */}\r\n            <Route path=\"*\">\r\n              <NoMatch />\r\n            </Route>\r\n          </Switch>\r\n        </Suspense>\r\n      </Router>\r\n    </Providers>\r\n  );\r\n};\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  return (\r\n    <TP1 theme={theme}>\r\n      <TP theme={newTheme}>\r\n        <UseWalletProvider\r\n          chainId={config.chainId}\r\n          connectors={{\r\n            walletconnect: { rpcUrl: config.defaultProvider },\r\n            walletlink: {\r\n              url: config.defaultProvider,\r\n              appName: 'STONE Finance',\r\n              appLogoUrl: 'https://github.com/tombfinance/tombfinance-assets/blob/master/logo_tomb_NoBG.png',\r\n            },\r\n          }}\r\n        >\r\n          <Provider store={store}>\r\n            <Updaters />\r\n            <RefreshContextProvider>\r\n              <TombFinanceProvider>\r\n                <ModalsProvider>\r\n                  <BanksProvider>\r\n                    <>\r\n                      <Popups />\r\n                      {children}\r\n                    </>\r\n                  </BanksProvider>\r\n                </ModalsProvider>\r\n              </TombFinanceProvider>\r\n            </RefreshContextProvider>\r\n          </Provider>\r\n        </UseWalletProvider>\r\n      </TP>\r\n    </TP1>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const TOMB_TICKER = 'APEX';\r\nexport const TSHARE_TICKER = 'ASHARE';\r\nexport const TBOND_TICKER = 'ABOND';\r\nexport const FTM_TICKER = 'FTM';\r\nexport const WFTM_TICKER = 'WFTM';\r\nexport const SPOOKY_ROUTER_ADDR = '0xF491e7B69E4244ad4002BC14e878a34207E38c29';\r\nexport const ZAPPER_ROUTER_ADDR = '0x8bb1fe7a50082623b372d857b4d07911c786a3e9';\r\nexport const TAX_OFFICE_ADDR = '0x2d24cae5ce7fe5ae16d5fdc022c5f67006acf5fb';\r\n","import { createAction } from '@reduxjs/toolkit';\r\n// import { ChainId } from '@uniswap/sdk';\r\nimport { ChainId } from '@spookyswap/sdk';\r\n\r\nexport interface SerializableTransactionReceipt {\r\n  to: string;\r\n  from: string;\r\n  contractAddress: string;\r\n  transactionIndex: number;\r\n  blockHash: string;\r\n  transactionHash: string;\r\n  blockNumber: number;\r\n  status?: number;\r\n}\r\n\r\nexport const addTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  from: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  summary?: string;\r\n}>('transactions/addTransaction');\r\n\r\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions');\r\n\r\nexport const finalizeTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  receipt: SerializableTransactionReceipt;\r\n}>('transactions/finalizeTransaction');\r\n\r\nexport const checkedTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  blockNumber: number;\r\n}>('transactions/checkedTransaction');\r\n","import { useCallback, useMemo } from 'react';\r\nimport { addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../index';\r\nimport { useWallet } from 'use-wallet';\r\n\r\nexport function useBlockNumber(): number | undefined {\r\n  const { chainId } = useWallet();\r\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\r\n}\r\n\r\nexport function useWalletModalOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.walletModalOpen);\r\n}\r\n\r\nexport function useWalletModalToggle(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\r\n}\r\n\r\nexport function useSettingsMenuOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\r\n}\r\n\r\nexport function useToggleSettingsMenu(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\r\n}\r\n\r\n// returns a function that allows adding a popup\r\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\r\n  const dispatch = useDispatch();\r\n\r\n  return useCallback(\r\n    (content: PopupContent, key?: string) => {\r\n      dispatch(addPopup({ content, key }));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// returns a function that allows removing a popup via its key\r\nexport function useRemovePopup(): (key: string) => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(\r\n    (key: string) => {\r\n      dispatch(removePopup({ key }));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// get the list of active popups\r\nexport function useActivePopups(): AppState['application']['popupList'] {\r\n  const list = useSelector((state: AppState) => state.application.popupList);\r\n  return useMemo(() => list.filter((item) => item.show), [list]);\r\n}\r\n"],"sourceRoot":""}