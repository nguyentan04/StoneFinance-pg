{"version":3,"sources":["assets/img/masonry.png","hooks/masonry/useClaimRewardTimerMasonry.ts","hooks/masonry/useClaimRewardCheck.ts","views/Boardroom/components/ProgressCountdown.tsx","hooks/useHarvestFromMasonry.ts","hooks/useEarningsOnMasonry.ts","views/Boardroom/components/Harvest.tsx","hooks/masonry/useWithdrawCheck.ts","views/Boardroom/components/DepositModal.tsx","views/Boardroom/components/WithdrawModal.tsx","hooks/useStakedBalanceOnMasonry.ts","hooks/masonry/useUnstakeTimerMasonry.ts","hooks/useStakeToMasonry.ts","hooks/useWithdrawFromMasonry.ts","views/Boardroom/components/Stake.tsx","hooks/useRedeemOnMasonry.ts","hooks/useCurrentEpoch.ts","hooks/useFetchMasonryAPR.ts","hooks/useCashPriceInEstimatedTWAP.ts","hooks/useTreasuryAllocationTimes.ts","hooks/useTotalStakedOnMasonry.ts","views/Boardroom/Boardroom.js","hooks/useHandleTransactionReceipt.ts","components/ModalActions/ModalActions.tsx","hooks/useApprove.ts","components/UnlockWallet/UnlockWallet.tsx","hooks/useTombStats.ts","assets/img/bg.jpg","components/Spacer/Spacer.tsx","components/Value/Value.tsx","hooks/useStakedTokenPriceInDollars.ts","components/Icon/Icon.tsx","components/icons/AddIcon.tsx","components/icons/RemoveIcon.tsx","components/IconButton/IconButton.tsx"],"names":["module","exports","useClaimRewardTimerMasonry","useState","from","Date","to","time","setTime","tombFinance","useTombFinance","useEffect","getUserClaimRewardTime","then","useClaimRewardCheck","slowRefresh","useRefresh","canClaimReward","setCanClaimReward","isUnlocked","a","canUserClaimRewardFromMasonry","console","error","canUserClaimReward","StyledCountdown","styled","p","props","theme","color","grey","StyledProgressOuter","div","StyledProgress","progress","StyledCardContentInner","spacing","ProgressCountdown","base","deadline","hideBar","percentage","description","now","getTime","key","date","renderer","countdownProps","days","hours","minutes","seconds","h","String","m","s","padStart","useHarvestFromMasonry","handleTransactionReceipt","useHandleTransactionReceipt","onReward","useCallback","harvestCashFromMasonry","useEarningsOnMasonry","BigNumber","balance","setBalance","getEarningsOnMasonry","fetchBalance","StyledCardHeader","StyledCardActions","Harvest","tombStats","useTombStats","earnings","tokenPriceInDollars","useMemo","Number","priceInDollars","toFixed","earnedInDollars","getDisplayBalance","Box","Card","CardContent","TokenSymbol","symbol","Value","value","Label","text","Button","onClick","variant","disabled","eq","mt","style","Typography","textAlign","useWithdrawCheck","canWithdraw","setCanWithdraw","canUserUnstakeFromMasonry","canUserWithdraw","DepositModal","max","onConfirm","onDismiss","tokenName","val","setVal","fullBalance","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","Modal","ModalTitle","TokenInput","onSelectMax","onChange","ModalActions","WithdrawModal","useStakedBalanceOnMasonry","getStakedSharesOnMasonry","useUnstakeTimerMasonry","getUserUnstakeTime","useStakeToMasonry","onStake","amount","stakeShareToMasonry","useWithdrawFromMasonry","onWithdraw","withdrawShareFromMasonry","StyledActionSpacer","Stake","useApprove","ASHARE","contracts","Masonry","address","approveStatus","approve","tokenBalance","useTokenBalance","stakedBalance","stakedTokenPriceInDollars","useStakedTokenPriceInDollars","toString","canWithdrawFromMasonry","useModal","onDismissDeposit","onPresentDeposit","onDismissWithdraw","onPresentWithdraw","ApprovalState","APPROVED","NOT_APPROVED","marginTop","IconButton","useRedeemOnMasonry","onRedeem","alertDesc","exitFromMasonry","useCurrentEpoch","currentEpoch","setCurrentEpoch","getCurrentEpoch","fetchCurrentEpoch","useFetchMasonryAPR","apr","setApr","getMasonryAPR","fetchMasonryAPR","useCashPriceInEstimatedTWAP","stat","setStat","getTombStatInEstimatedTWAP","fetchCashPrice","useTreasuryAllocationTimes","getTreasuryNextAllocationTime","useTotalStakedOnMasonry","totalStaked","setTotalStaked","getTotalStakedInMasonry","fetchTotalStaked","BackgroundImage","createGlobalStyle","Background","useStyles","makeStyles","gridItem","height","breakpoints","up","StyledBoardroom","StyledCardsWrapper","StyledCardWrapper","Boardroom","classes","account","useWallet","cashStat","masonryAPR","scalingFactor","Page","align","gutterBottom","Grid","container","justify","item","xs","md","lg","className","moment","toDate","width","Alert","severity","Spacer","UnlockWallet","addTransaction","useTransactionAdder","addPopup","useAddPopup","promise","summary","tx","catch","err","message","includes","toLowerCase","slice","stack","StyledModalActions","StyledModalAction","StyledSpacer","children","l","React","Children","toArray","length","map","child","i","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","token","spender","pendingApproval","useHasPendingApproval","currentAllowance","useAllowance","approvalState","lt","PENDING","UNKNOWN","response","approval","tokenAddress","position","top","left","transform","AccountButton","fastRefresh","getTombStat","fetchTombPrice","size","useContext","ThemeContext","StyledValue","stakedTokenName","stakedToken","setStakedTokenPriceInDollars","getDepositTokenPriceInDollars","refreshStakedTokenPriceInDollars","setInterval","config","refreshInterval","clearInterval","StyledIcon","Icon","AddIcon","themeColor","viewBox","d","fill","RemoveIcon","StyledButton","button","primary","main","undefined","StyledLink","Link"],"mappings":"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","file":"static/js/15.a39c5316.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/masonry.042cb5a6.png\";","import { useEffect, useState } from 'react';\r\nimport useTombFinance from '../useTombFinance';\r\nimport { AllocationTime } from '../../tomb-finance/types';\r\n\r\nconst useClaimRewardTimerMasonry = () => {\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance.getUserClaimRewardTime().then(setTime);\r\n    }\r\n  }, [tombFinance]);\r\n  return time;\r\n};\r\n\r\nexport default useClaimRewardTimerMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport useRefresh from '../useRefresh';\r\nimport useTombFinance from './../useTombFinance';\r\n\r\nconst useClaimRewardCheck = () => {\r\n  const  { slowRefresh } = useRefresh();\r\n  const [canClaimReward, setCanClaimReward] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function canUserClaimReward() {\r\n      try {\r\n        setCanClaimReward(await tombFinance.canUserClaimRewardFromMasonry());\r\n      } catch(err){\r\n        console.error(err);\r\n      };\r\n    }\r\n    if (isUnlocked) {\r\n      canUserClaimReward();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return canClaimReward;\r\n};\r\n\r\nexport default useClaimRewardCheck;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Countdown, { CountdownRenderProps } from 'react-countdown';\r\n\r\ninterface ProgressCountdownProps {\r\n  base: Date;\r\n  deadline: Date;\r\n  hideBar?: boolean;\r\n  description: string;\r\n}\r\n\r\nconst ProgressCountdown: React.FC<ProgressCountdownProps> = ({ base, deadline, hideBar, description }) => {\r\n  const percentage =\r\n    Date.now() >= deadline.getTime()\r\n      ? 100\r\n      : ((Date.now() - base.getTime()) / (deadline.getTime() - base.getTime())) * 100;\r\n\r\n  const countdownRenderer = (countdownProps: CountdownRenderProps) => {\r\n    const { days, hours, minutes, seconds } = countdownProps;\r\n    const h = String(days * 24 + hours);\r\n    const m = String(minutes);\r\n    const s = String(seconds);\r\n    return (\r\n      <StyledCountdown>\r\n        {h.padStart(2, '0')}:{m.padStart(2, '0')}:{s.padStart(2, '0')}\r\n      </StyledCountdown>\r\n    );\r\n  };\r\n  return (\r\n    // <Card>\r\n    <StyledCardContentInner>\r\n      {/* <StyledDesc>{description}</StyledDesc> */}\r\n      <Countdown key={new Date().getTime()} date={deadline} renderer={countdownRenderer} />\r\n      {hideBar ? (\r\n        ''\r\n      ) : (\r\n        <StyledProgressOuter>\r\n          <StyledProgress progress={percentage} />\r\n        </StyledProgressOuter>\r\n      )}\r\n    </StyledCardContentInner>\r\n    // </Card>\r\n  );\r\n};\r\n\r\nconst StyledCountdown = styled.p`\r\n  // font-size: 14px;\r\n  font-weight: 700;\r\n  // color: ${(props) => props.theme.color.grey[100]};\r\n  margin: 0 0 6px 0;\r\n`;\r\n\r\nconst StyledProgressOuter = styled.div`\r\n  width: 100%;\r\n  height: 8px;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[700]};\r\n`;\r\n\r\nconst StyledProgress = styled.div<{ progress: number }>`\r\n  width: ${(props) => props.progress}%;\r\n  height: 100%;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.color.grey[100]};\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  // padding: ${(props) => props.theme.spacing[2]}px ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ProgressCountdown;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useHarvestFromMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleReward = useCallback(() => {\r\n    handleTransactionReceipt(tombFinance.harvestCashFromMasonry(), 'Claim APEX from Masonry');\r\n  }, [tombFinance, handleTransactionReceipt]);\r\n\r\n  return { onReward: handleReward };\r\n};\r\n\r\nexport default useHarvestFromMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useEarningsOnMasonry = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getEarningsOnMasonry());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [isUnlocked, tombFinance, slowRefresh]);\r\n\r\n  return balance;\r\n};\r\n\r\nexport default useEarningsOnMasonry;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport useClaimRewardTimerMasonry from '../../../hooks/masonry/useClaimRewardTimerMasonry';\r\nimport useClaimRewardCheck from '../../../hooks/masonry/useClaimRewardCheck';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useHarvestFromMasonry from '../../../hooks/useHarvestFromMasonry';\r\nimport useEarningsOnMasonry from '../../../hooks/useEarningsOnMasonry';\r\nimport useTombStats from '../../../hooks/useTombStats';\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nconst Harvest: React.FC = () => {\r\n  const tombStats = useTombStats();\r\n  const { onReward } = useHarvestFromMasonry();\r\n  const earnings = useEarningsOnMasonry();\r\n  const canClaimReward = useClaimRewardCheck();\r\n\r\n  const tokenPriceInDollars = useMemo(\r\n    () => (tombStats ? Number(tombStats.priceInDollars).toFixed(2) : null),\r\n    [tombStats],\r\n  );\r\n\r\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(earnings))).toFixed(2);\r\n\r\n  const { from, to } = useClaimRewardTimerMasonry();\r\n\r\n  return (\r\n    <Box>\r\n      <Card>\r\n        <CardContent>\r\n          <StyledCardContentInner>\r\n            <StyledCardHeader>\r\n\r\n                <TokenSymbol symbol=\"APEX\" />\r\n              <Value value={getDisplayBalance(earnings)} />\r\n              <Label text={`≈ $${earnedInDollars}`} />\r\n              <Label text=\"STONE Earned\" />\r\n            </StyledCardHeader>\r\n            <StyledCardActions>\r\n              <Button\r\n                onClick={onReward}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                disabled={earnings.eq(0) || !canClaimReward}\r\n              >\r\n                Claim Reward\r\n              </Button>\r\n            </StyledCardActions>\r\n          </StyledCardContentInner>\r\n        </CardContent>\r\n      </Card>\r\n      <Box mt={2} style={{ color: '#FFF' }}>\r\n        {canClaimReward ? (\r\n          ''\r\n        ) : (\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{ textAlign: 'center' }}>Claim possible in</Typography>\r\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Claim available in\" />\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[6]}px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Harvest;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './../useTombFinance';\r\nimport useRefresh from '../useRefresh';\r\n\r\nconst useWithdrawCheck = () => {\r\n  const [canWithdraw, setCanWithdraw] = useState(false);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function canUserWithdraw() {\r\n      try {\r\n        setCanWithdraw(await tombFinance.canUserUnstakeFromMasonry());\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      canUserWithdraw();\r\n    }\r\n  }, [isUnlocked, tombFinance, slowRefresh]);\r\n\r\n  return canWithdraw;\r\n};\r\n\r\nexport default useWithdrawCheck;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@material-ui/core';\r\n// import Button from '../../../components/Button'\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface DepositModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, tokenName === 'USDC' ? 6 : 18);\r\n  }, [max, tokenName]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Deposit ${tokenName}`} />\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DepositModal;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { Button } from '@material-ui/core';\r\nimport Modal, { ModalProps } from '../../../components/Modal';\r\nimport ModalActions from '../../../components/ModalActions';\r\nimport ModalTitle from '../../../components/ModalTitle';\r\nimport TokenInput from '../../../components/TokenInput';\r\n\r\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\r\nimport { BigNumber } from 'ethers';\r\n\r\ninterface WithdrawModalProps extends ModalProps {\r\n  max: BigNumber;\r\n  onConfirm: (amount: string) => void;\r\n  tokenName?: string;\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('');\r\n\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max);\r\n  }, [max]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value);\r\n    },\r\n    [setVal],\r\n  );\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance);\r\n  }, [fullBalance, setVal]);\r\n\r\n  return (\r\n    <Modal>\r\n      <ModalTitle text={`Withdraw ${tokenName}`} />\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={() => onConfirm(val)}>\r\n          Confirm\r\n        </Button>\r\n        {/* <Button text=\"Cancel\" variant=\"secondary\" onClick={onDismiss} />\r\n        <Button text=\"Confirm\" onClick={() => onConfirm(val)} /> */}\r\n      </ModalActions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WithdrawModal;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useStakedBalanceOnMasonry = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [balance, setBalance] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        setBalance(await tombFinance.getStakedSharesOnMasonry());\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n      fetchBalance();\r\n    }\r\n  }, [slowRefresh, isUnlocked, tombFinance]);\r\n  return balance;\r\n};\r\n\r\nexport default useStakedBalanceOnMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './../useTombFinance';\r\nimport { AllocationTime } from '../../tomb-finance/types';\r\n\r\nconst useUnstakeTimerMasonry = () => {\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance.getUserUnstakeTime().then(setTime);\r\n    }\r\n  }, [tombFinance]);\r\n  return time;\r\n};\r\n\r\nexport default useUnstakeTimerMasonry;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useStakeToMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleStake = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(tombFinance.stakeShareToMasonry(amount), `Stake ${amount} ASHARE to the masonry`);\r\n    },\r\n    [tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onStake: handleStake };\r\n};\r\n\r\nexport default useStakeToMasonry;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useWithdrawFromMasonry = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleWithdraw = useCallback(\r\n    (amount: string) => {\r\n      handleTransactionReceipt(\r\n        tombFinance.withdrawShareFromMasonry(amount),\r\n        `Withdraw ${amount} ASHARE from the masonry`,\r\n      );\r\n    },\r\n    [tombFinance, handleTransactionReceipt],\r\n  );\r\n  return { onWithdraw: handleWithdraw };\r\n};\r\n\r\nexport default useWithdrawFromMasonry;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Box, Button, Card, CardContent, Typography } from '@material-ui/core';\r\n\r\n// import Button from '../../../components/Button';\r\n// import Card from '../../../components/Card';\r\n// import CardContent from '../../../components/CardContent';\r\nimport CardIcon from '../../../components/CardIcon';\r\nimport { AddIcon, RemoveIcon } from '../../../components/icons';\r\nimport IconButton from '../../../components/IconButton';\r\nimport Label from '../../../components/Label';\r\nimport Value from '../../../components/Value';\r\n\r\nimport useApprove, { ApprovalState } from '../../../hooks/useApprove';\r\nimport useModal from '../../../hooks/useModal';\r\nimport useTokenBalance from '../../../hooks/useTokenBalance';\r\nimport useWithdrawCheck from '../../../hooks/masonry/useWithdrawCheck';\r\n\r\nimport { getDisplayBalance } from '../../../utils/formatBalance';\r\n\r\nimport DepositModal from './DepositModal';\r\nimport WithdrawModal from './WithdrawModal';\r\nimport useTombFinance from '../../../hooks/useTombFinance';\r\nimport ProgressCountdown from './../components/ProgressCountdown';\r\nimport useStakedBalanceOnMasonry from '../../../hooks/useStakedBalanceOnMasonry';\r\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\r\nimport useUnstakeTimerMasonry from '../../../hooks/masonry/useUnstakeTimerMasonry';\r\nimport TokenSymbol from '../../../components/TokenSymbol';\r\nimport useStakeToMasonry from '../../../hooks/useStakeToMasonry';\r\nimport useWithdrawFromMasonry from '../../../hooks/useWithdrawFromMasonry';\r\n\r\nconst Stake: React.FC = () => {\r\n  const tombFinance = useTombFinance();\r\n  const [approveStatus, approve] = useApprove(tombFinance.ASHARE, tombFinance.contracts.Masonry.address);\r\n\r\n  const tokenBalance = useTokenBalance(tombFinance.ASHARE);\r\n  const stakedBalance = useStakedBalanceOnMasonry();\r\n  const { from, to } = useUnstakeTimerMasonry();\r\n\r\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('ASHARE', tombFinance.ASHARE);\r\n  const tokenPriceInDollars = useMemo(\r\n    () =>\r\n      stakedTokenPriceInDollars\r\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalance))).toFixed(2).toString()\r\n        : null,\r\n    [stakedTokenPriceInDollars, stakedBalance],\r\n  );\r\n  // const isOldBoardroomMember = boardroomVersion !== 'latest';\r\n\r\n  const { onStake } = useStakeToMasonry();\r\n  const { onWithdraw } = useWithdrawFromMasonry();\r\n  const canWithdrawFromMasonry = useWithdrawCheck();\r\n\r\n  const [onPresentDeposit, onDismissDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      onConfirm={(value) => {\r\n        onStake(value);\r\n        onDismissDeposit();\r\n      }}\r\n      tokenName={'AShare'}\r\n    />,\r\n  );\r\n\r\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\r\n    <WithdrawModal\r\n      max={stakedBalance}\r\n      onConfirm={(value) => {\r\n        onWithdraw(value);\r\n        onDismissWithdraw();\r\n      }}\r\n      tokenName={'AShare'}\r\n    />,\r\n  );\r\n\r\n  return (\r\n    <Box>\r\n      <Card>\r\n        <CardContent>\r\n          <StyledCardContentInner>\r\n            <StyledCardHeader>\r\n                <TokenSymbol symbol=\"ASHARE\" />\r\n              <Value value={getDisplayBalance(stakedBalance)} />\r\n              <Label text={`≈ $${tokenPriceInDollars}`} />\r\n              <Label text={'SSHARE Staked'} />\r\n            </StyledCardHeader>\r\n            <StyledCardActions>\r\n              {approveStatus !== ApprovalState.APPROVED ? (\r\n                <Button\r\n                  disabled={approveStatus !== ApprovalState.NOT_APPROVED}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: '20px' }}\r\n                  onClick={approve}\r\n                >\r\n                  Approve ASHARE\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  <IconButton disabled={!canWithdrawFromMasonry} onClick={onPresentWithdraw}>\r\n                    <RemoveIcon />\r\n                  </IconButton>\r\n                  <StyledActionSpacer />\r\n                  <IconButton onClick={onPresentDeposit}>\r\n                    <AddIcon />\r\n                  </IconButton>\r\n                </>\r\n              )}\r\n            </StyledCardActions>\r\n          </StyledCardContentInner>\r\n        </CardContent>\r\n      </Card>\r\n      <Box mt={2} style={{ color: '#FFF' }}>\r\n        {canWithdrawFromMasonry ? (\r\n          ''\r\n        ) : (\r\n          <Card>\r\n            <CardContent>\r\n              <Typography style={{ textAlign: 'center' }}>Withdraw possible in</Typography>\r\n              <ProgressCountdown hideBar={true} base={from} deadline={to} description=\"Withdraw available in\" />\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledActionSpacer = styled.div`\r\n  height: ${(props) => props.theme.spacing[4]}px;\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport default Stake;\r\n","import { useCallback } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useHandleTransactionReceipt from './useHandleTransactionReceipt';\r\n\r\nconst useRedeemOnMasonry = (description?: string) => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleRedeem = useCallback(() => {\r\n    const alertDesc = description || 'Redeem ASHARE from Masonry';\r\n    handleTransactionReceipt(tombFinance.exitFromMasonry(), alertDesc);\r\n  }, [tombFinance, description, handleTransactionReceipt]);\r\n  return { onRedeem: handleRedeem };\r\n};\r\n\r\nexport default useRedeemOnMasonry;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { BigNumber } from 'ethers';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useCurrentEpoch = () => {\r\n  const [currentEpoch, setCurrentEpoch] = useState<BigNumber>(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchCurrentEpoch () {\r\n      try {\r\n        setCurrentEpoch(await tombFinance.getCurrentEpoch());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchCurrentEpoch();\r\n  }, [setCurrentEpoch, tombFinance, slowRefresh]);\r\n\r\n  return currentEpoch;\r\n};\r\n\r\nexport default useCurrentEpoch;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useFetchMasonryAPR = () => {\r\n  const [apr, setApr] = useState<number>(0);\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchMasonryAPR() {\r\n      try {\r\n        setApr(await tombFinance.getMasonryAPR());\r\n      } catch(err){\r\n        console.error(err);\r\n      }\r\n    }\r\n   fetchMasonryAPR();\r\n  }, [setApr, tombFinance, slowRefresh]);\r\n\r\n  return apr;\r\n};\r\n\r\nexport default useFetchMasonryAPR;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useCashPriceInEstimatedTWAP = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh(); \r\n\r\n  useEffect(() => {\r\n    async function fetchCashPrice() {\r\n      try {\r\n        setStat(await tombFinance.getTombStatInEstimatedTWAP());\r\n      }catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchCashPrice();\r\n  }, [setStat, tombFinance, slowRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useCashPriceInEstimatedTWAP;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { AllocationTime } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\n\r\nconst useTreasuryAllocationTimes = () => {\r\n  const { slowRefresh } = useRefresh();\r\n  const [time, setTime] = useState<AllocationTime>({\r\n    from: new Date(),\r\n    to: new Date(),\r\n  });\r\n  const tombFinance = useTombFinance();\r\n  useEffect(() => {\r\n    if (tombFinance) {\r\n      tombFinance.getTreasuryNextAllocationTime().then(setTime);\r\n    }\r\n  }, [tombFinance, slowRefresh]);\r\n  return time;\r\n};\r\n\r\nexport default useTreasuryAllocationTimes;\r\n","import { useEffect, useState } from 'react';\r\nimport { BigNumber } from 'ethers';\r\nimport useTombFinance from './useTombFinance';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTotalStakedOnMasonry = () => {\r\n  const [totalStaked, setTotalStaked] = useState(BigNumber.from(0));\r\n  const tombFinance = useTombFinance();\r\n  const { slowRefresh } = useRefresh();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalStaked() {\r\n      try {\r\n        setTotalStaked(await tombFinance.getTotalStakedInMasonry());\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n    if (isUnlocked) {\r\n     fetchTotalStaked();\r\n    }\r\n  }, [isUnlocked, slowRefresh, tombFinance]);\r\n\r\n  return totalStaked;\r\n};\r\n\r\nexport default useTotalStakedOnMasonry;\r\n","import React, { useMemo } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport moment from 'moment';\r\nimport styled from 'styled-components';\r\nimport Spacer from '../../components/Spacer';\r\nimport Harvest from './components/Harvest';\r\nimport Stake from './components/Stake';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Box, Card, CardContent, Button, Typography, Grid } from '@material-ui/core';\r\n\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport Page from '../../components/Page';\r\n\r\nimport useRedeemOnMasonry from '../../hooks/useRedeemOnMasonry';\r\nimport useStakedBalanceOnMasonry from '../../hooks/useStakedBalanceOnMasonry';\r\nimport { getDisplayBalance } from '../../utils/formatBalance';\r\nimport useCurrentEpoch from '../../hooks/useCurrentEpoch';\r\nimport useFetchMasonryAPR from '../../hooks/useFetchMasonryAPR';\r\n\r\nimport useCashPriceInEstimatedTWAP from '../../hooks/useCashPriceInEstimatedTWAP';\r\nimport useTreasuryAllocationTimes from '../../hooks/useTreasuryAllocationTimes';\r\nimport useTotalStakedOnMasonry from '../../hooks/useTotalStakedOnMasonry';\r\nimport useClaimRewardCheck from '../../hooks/masonry/useClaimRewardCheck';\r\nimport useWithdrawCheck from '../../hooks/masonry/useWithdrawCheck';\r\nimport ProgressCountdown from './components/ProgressCountdown';\r\nimport MasonryImage from '../../assets/img/masonry.png';\r\nimport Background from '../../assets/img/bg.jpg';\r\n\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nconst BackgroundImage = createGlobalStyle`\r\n  body {\r\n    // background-size: cover !important;\r\n    // background-color: rgb(24, 24, 33);\r\n    background: url(${Background}) no-repeat !important;\r\n  }\r\n`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridItem: {\r\n    height: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      height: '90px',\r\n    },\r\n  },\r\n}));\r\n\r\nconst Boardroom = () => {\r\n  const classes = useStyles();\r\n  const { account } = useWallet();\r\n  const { onRedeem } = useRedeemOnMasonry();\r\n  const stakedBalance = useStakedBalanceOnMasonry();\r\n  const currentEpoch = useCurrentEpoch();\r\n  const cashStat = useCashPriceInEstimatedTWAP();\r\n  const totalStaked = useTotalStakedOnMasonry();\r\n  const masonryAPR = useFetchMasonryAPR();\r\n  const canClaimReward = useClaimRewardCheck();\r\n  const canWithdraw = useWithdrawCheck();\r\n  const scalingFactor = useMemo(() => (cashStat ? Number(cashStat.priceInDollars).toFixed(4) : null), [cashStat]);\r\n  const { to } = useTreasuryAllocationTimes();\r\n\r\n  return (\r\n    <Page>\r\n      <BackgroundImage />\r\n\r\n\r\n      {!!account ? (\r\n        <>\r\n          <Typography style={{color:'#fff'}} align=\"center\" variant=\"h5\" gutterBottom>\r\n            Board Room\r\n          </Typography>\r\n          <Box mt={5}>\r\n            <Grid container justify=\"center\" spacing={3}>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent>\r\n                    <Typography style={{ textAlign: 'center' }}>Next Epoch</Typography>\r\n                    <ProgressCountdown base={moment().toDate()} hideBar={true} deadline={to} description=\"Next Epoch\" />\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography style={{color:'#fff'}} align=\"center\" gutterBottom>Current Epoch</Typography>\r\n                    <Typography>{Number(currentEpoch)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>\r\n                      STONE Price<small>(TWAP)</small>\r\n                    </Typography>\r\n                    <Typography>{scalingFactor}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2} className={classes.gridItem}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>APR</Typography>\r\n                    <Typography>{masonryAPR.toFixed(2)}%</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={12} md={2} lg={2}>\r\n                <Card className={classes.gridItem}>\r\n                  <CardContent align=\"center\">\r\n                    <Typography>SSHARE Staked</Typography>\r\n                    <Typography>{getDisplayBalance(totalStaked)}</Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container justify=\"center\">\r\n              <Box mt={3} style={{ width: '600px' }}>\r\n                <Alert variant=\"filled\" severity=\"warning\">\r\n                  Staked SSHAREs can only be withdrawn after 6 epochs since deposit.\r\n                </Alert>\r\n              </Box>\r\n            </Grid>\r\n\r\n            <Box mt={4}>\r\n              <StyledBoardroom>\r\n                <StyledCardsWrapper>\r\n                  <StyledCardWrapper>\r\n                    <Harvest />\r\n                  </StyledCardWrapper>\r\n                  <Spacer />\r\n                  <StyledCardWrapper>\r\n                    <Stake />\r\n                  </StyledCardWrapper>\r\n                </StyledCardsWrapper>\r\n              </StyledBoardroom>\r\n            </Box>\r\n\r\n            {/* <Grid container justify=\"center\" spacing={3}>\r\n            <Grid item xs={4}>\r\n              <Card>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Rewards</Typography>\r\n\r\n                </CardContent>\r\n                <CardActions style={{justifyContent: 'center'}}>\r\n                  <Button color=\"primary\" variant=\"outlined\">Claim Reward</Button>\r\n                </CardActions>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Claim Countdown</Typography>\r\n                  <Typography>00:00:00</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Card>\r\n                <CardContent align=\"center\">\r\n                  <Typography>Stakings</Typography>\r\n                  <Typography>{getDisplayBalance(stakedBalance)}</Typography>\r\n                </CardContent>\r\n                <CardActions style={{justifyContent: 'center'}}>\r\n                  <Button>+</Button>\r\n                  <Button>-</Button>\r\n                </CardActions>\r\n              </Card>\r\n            </Grid>\r\n          </Grid> */}\r\n          </Box>\r\n\r\n          <Box mt={5}>\r\n            <Grid container justify=\"center\" spacing={3} mt={10}>\r\n              <Button\r\n                disabled={stakedBalance.eq(0) || (!canWithdraw && !canClaimReward)}\r\n                onClick={onRedeem}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n              >\r\n                Claim and Withdraw\r\n              </Button>\r\n            </Grid>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <UnlockWallet />\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst StyledBoardroom = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledCardsWrapper = styled.div`\r\n  display: flex;\r\n  width: 600px;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nexport default Boardroom;\r\n","import { useCallback } from 'react';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { useTransactionAdder } from '../state/transactions/hooks';\r\nimport { useAddPopup } from '../state/application/hooks';\r\n\r\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\r\n  const addTransaction = useTransactionAdder();\r\n  const addPopup = useAddPopup();\r\n\r\n  return useCallback(\r\n    (promise: Promise<TransactionResponse>, summary: string) => {\r\n      promise\r\n        .then((tx) => addTransaction(tx, { summary }))\r\n        .catch((err) => {\r\n          if (err.message.includes('User denied')) {\r\n            // User denied transaction signature on MetaMask.\r\n            return;\r\n          }\r\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\r\n          console.error(`${message}: ${err.message || err.stack}`);\r\n          addPopup({ error: { message, stack: err.message || err.stack } });\r\n        });\r\n    },\r\n    [addPopup, addTransaction],\r\n  );\r\n}\r\n\r\nexport default useHandleTransactionReceipt;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length;\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <StyledSpacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  );\r\n};\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.color.grey[100]}00;\r\n  display: flex;\r\n  height: 96px;\r\n  margin: ${(props) => props.theme.spacing[4]}px ${(props) => -props.theme.spacing[4]}px\r\n    ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ModalActions;\r\n","import { BigNumber, ethers } from 'ethers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\r\nimport useAllowance from './useAllowance';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\r\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\r\n  const pendingApproval = useHasPendingApproval(token.address, spender);\r\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED;\r\n  }, [currentAllowance, pendingApproval]);\r\n\r\n  const addTransaction = useTransactionAdder();\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily');\r\n      return;\r\n    }\r\n\r\n    const response = await token.approve(spender, APPROVE_AMOUNT);\r\n    addTransaction(response, {\r\n      summary: `Approve ${token.symbol}`,\r\n      approval: {\r\n        tokenAddress: token.address,\r\n        spender: spender,\r\n      },\r\n    });\r\n  }, [approvalState, token, spender, addTransaction]);\r\n\r\n  return [approvalState, approve];\r\n}\r\n\r\nexport default useApprove;\r\n","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport AccountButton from '../Nav/AccountButton';\r\n\r\nconst UnlockWallet = () => {\r\n  return (\r\n    <Box style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\r\n      <AccountButton />\r\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UnlockWallet;\r\n","import { useEffect, useState } from 'react';\r\nimport useTombFinance from './useTombFinance';\r\nimport { TokenStat } from '../tomb-finance/types';\r\nimport useRefresh from './useRefresh';\r\n\r\nconst useTombStats = () => {\r\n  const [stat, setStat] = useState<TokenStat>();\r\n  const { fastRefresh } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchTombPrice(){\r\n      try {\r\n        setStat(await tombFinance.getTombStat());\r\n      }\r\n      catch(err){\r\n        console.error(err)\r\n      }\r\n    }\r\n    fetchTombPrice();\r\n  }, [setStat, tombFinance, fastRefresh]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useTombStats;\r\n","module.exports = __webpack_public_path__ + \"static/media/bg.1923e644.jpg\";","import React, { useContext } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext);\r\n\r\n  let s: number;\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6];\r\n      break;\r\n    case 'sm':\r\n      s = spacing[2];\r\n      break;\r\n    case 'md':\r\n    default:\r\n      s = spacing[4];\r\n  }\r\n\r\n  return <StyledSpacer size={s} />;\r\n};\r\n\r\ninterface StyledSpacerProps {\r\n  size: number;\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`;\r\n\r\nexport default Spacer;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\ninterface ValueProps {\r\n  value: string;\r\n}\r\n\r\nconst Value: React.FC<ValueProps> = ({ value }) => {\r\n  return <StyledValue>{value}</StyledValue>;\r\n};\r\n\r\nconst StyledValue = styled.div`\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport default Value;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport useTombFinance from './useTombFinance';\r\nimport config from '../config';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst useStakedTokenPriceInDollars = (stakedTokenName: string, stakedToken: ERC20) => {\r\n  const [stakedTokenPriceInDollars, setStakedTokenPriceInDollars] = useState('0');\r\n  const tombFinance = useTombFinance();\r\n  const isUnlocked = tombFinance?.isUnlocked;\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    const balance = await tombFinance.getDepositTokenPriceInDollars(stakedTokenName, stakedToken);\r\n    setStakedTokenPriceInDollars(balance);\r\n  }, [stakedToken, stakedTokenName, tombFinance]);\r\n\r\n  useEffect(() => {\r\n    if (isUnlocked) {\r\n      fetchBalance().catch((err) => console.error(err.stack));\r\n\r\n      const refreshStakedTokenPriceInDollars = setInterval(fetchBalance, config.refreshInterval);\r\n      return () => clearInterval(refreshStakedTokenPriceInDollars);\r\n    }\r\n  }, [isUnlocked, setStakedTokenPriceInDollars, tombFinance, fetchBalance]);\r\n\r\n  return stakedTokenPriceInDollars;\r\n};\r\n\r\nexport default useStakedTokenPriceInDollars;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IconProps {\r\n  color?: string;\r\n  children?: string;\r\n}\r\n\r\nconst Icon: React.FC = ({ children }) => <StyledIcon>{children}</StyledIcon>;\r\n\r\nconst StyledIcon = styled.div``;\r\n\r\nexport default Icon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst AddIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" fill={color ? color : themeColor.grey[900]} />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default AddIcon;\r\n","import React, { useContext } from 'react';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport Icon, { IconProps } from '../Icon';\r\n\r\nconst RemoveIcon: React.FC<IconProps> = ({ color }) => {\r\n  const { color: themeColor } = useContext(ThemeContext);\r\n  return (\r\n    <Icon>\r\n      <svg viewBox=\"0 0 24 24\" fill={color ? color : themeColor.grey[900]} width=\"18px\" height=\"18px\">\r\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n        <path d=\"M19 13H5v-2h14v2z\" />\r\n      </svg>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default RemoveIcon;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IconButtonProps {\r\n  children?: React.ReactNode;\r\n  disabled?: boolean;\r\n  onClick?: () => void;\r\n  to?: string;\r\n}\r\n\r\nconst IconButton: React.FC<IconButtonProps> = ({ children, disabled, onClick, to }) => {\r\n  return (\r\n    <StyledButton disabled={disabled} onClick={onClick}>\r\n      {!!to ? <StyledLink to={to}>{children}</StyledLink> : children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\ninterface StyledButtonProps {\r\n  disabled?: boolean;\r\n}\r\n/*\r\n  box-shadow: 6px 6px 12px ${props => props.theme.color.grey[600]},\r\n    -12px -12px 24px ${props => props.theme.color.grey[800]}aa;\r\n */\r\n\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  align-items: center;\r\n  // background-color: ${(props) => props.theme.color.grey[!props.disabled ? 700 : 900]};\r\n  background-color: ${(props) => (!props.disabled ? '#0086ff' : props.theme.color.grey[900])};\r\n  border: 0;\r\n  border-radius: 28px;\r\n  color: ${(props) => (!props.disabled ? props.theme.color.primary.main : props.theme.color.grey[500])};\r\n  cursor: pointer;\r\n  display: flex;\r\n  font-weight: 700;\r\n  height: 56px;\r\n  justify-content: center;\r\n  letter-spacing: 1px;\r\n  outline: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  pointer-events: ${(props) => (!props.disabled ? undefined : 'none')};\r\n  text-transform: uppercase;\r\n  width: 56px;\r\n  &:hover {\r\n    // background-color: ${(props) => props.theme.color.grey[800]};\r\n    background-color: #50efca;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  align-items: center;\r\n  color: inherit;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 56px;\r\n  justify-content: center;\r\n  margin: 0 ${(props) => -props.theme.spacing[4]}px;\r\n  padding: 0 ${(props) => props.theme.spacing[4]}px;\r\n  text-decoration: none;\r\n`;\r\n\r\nexport default IconButton;\r\n"],"sourceRoot":""}