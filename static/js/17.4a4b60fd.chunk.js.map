{"version":3,"sources":["assets/img/pit.png","hooks/TShareSwapper/useSwapTBondToTShare.ts","hooks/TShareSwapper/useTShareSwapperStats.ts","views/Sbs/Sbs.tsx","hooks/useHandleTransactionReceipt.ts","hooks/useApprove.ts","components/UnlockWallet/UnlockWallet.tsx","components/Spacer/Spacer.tsx","components/PageHeader/PageHeader.tsx"],"names":["module","exports","useSwapTBondToTShare","tombFinance","useTombFinance","handleTransactionReceipt","useHandleTransactionReceipt","onSwapTShare","useCallback","tbondAmount","tbondAmountBn","parseUnits","swapTBondToTShare","useTShareSwapperStats","account","useState","stat","setStat","fastRefresh","useRefresh","useEffect","a","myAccount","getTShareSwapperStat","console","error","fetchTShareSwapperStat","BackgroundImage","createGlobalStyle","PitImage","isNumeric","n","isNaN","parseFloat","isFinite","StyledBoardroom","styled","div","StyledCardsWrapper","StyledCardWrapper","StyledApproveWrapper","StyledCardTitle","props","theme","spacing","StyledCardIcon","color","grey","StyledExchanger","StyledToken","StyledCardContentInner","StyledDesc","span","Sbs","path","useRouteMatch","useWallet","setTbondAmount","tshareAmount","setTshareAmount","useApprove","ABOND","contracts","TShareSwapper","address","approveStatus","approve","tshareSwapperStat","tshareBalance","useMemo","Number","bondBalance","tbondBalance","handleTBondChange","e","currentTarget","value","estimateAmountOfTShare","updateTShareAmount","handleTBondSelectMax","String","handleTShareSelectMax","rateTSharePerTomb","updateTBondAmount","BigNumber","from","pow","mul","getDisplayBalance","handleTShareChange","inputData","Page","exact","PageHeader","icon","title","subtitle","Box","mt","Grid","container","justify","Card","CardContent","TokenSymbol","symbol","size","item","xs","TokenInput","onSelectMax","onChange","max","Spacer","ASHARE","ApprovalState","APPROVED","Button","disabled","NOT_APPROVED","variant","onClick","toString","UnlockWallet","addTransaction","useTransactionAdder","addPopup","useAddPopup","promise","summary","then","tx","catch","err","message","includes","toLowerCase","slice","stack","APPROVE_AMOUNT","ethers","constants","MaxUint256","APPROVE_BASE_AMOUNT","token","spender","pendingApproval","useHasPendingApproval","currentAllowance","useAllowance","approvalState","lt","PENDING","UNKNOWN","response","approval","tokenAddress","style","position","top","left","transform","AccountButton","StyledSpacer","s","useContext","ThemeContext","StyledPageHeader","StyledTitle","h1","StyledSubtitle","h3"],"mappings":"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","file":"static/js/17.4a4b60fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pit.268bf984.png\";","import { useCallback } from 'react';\r\nimport useTombFinance from '../useTombFinance';\r\nimport useHandleTransactionReceipt from '../useHandleTransactionReceipt';\r\n// import { BigNumber } from \"ethers\";\r\nimport { parseUnits } from 'ethers/lib/utils';\r\n\r\n\r\nconst useSwapTBondToTShare = () => {\r\n  const tombFinance = useTombFinance();\r\n  const handleTransactionReceipt = useHandleTransactionReceipt();\r\n\r\n  const handleSwapTShare = useCallback(\r\n  \t(tbondAmount: string) => {\r\n\t  \tconst tbondAmountBn = parseUnits(tbondAmount, 18);\r\n\t  \thandleTransactionReceipt(\r\n\t  \t\ttombFinance.swapTBondToTShare(tbondAmountBn),\r\n\t  \t\t`Swap ${tbondAmount} TBond to TShare`\r\n\t  \t);\r\n  \t},\r\n  \t[tombFinance, handleTransactionReceipt]\r\n  );\r\n  return { onSwapTShare: handleSwapTShare };\r\n};\r\n\r\nexport default useSwapTBondToTShare;","import { useEffect, useState } from 'react';\r\nimport useTombFinance from '../useTombFinance';\r\nimport { TShareSwapperStat } from '../../tomb-finance/types';\r\nimport useRefresh from '../useRefresh';\r\n\r\nconst useTShareSwapperStats = (account: string) => {\r\n  const [stat, setStat] = useState<TShareSwapperStat>();\r\n  const { fastRefresh/*, slowRefresh*/ } = useRefresh();\r\n  const tombFinance = useTombFinance();\r\n\r\n  useEffect(() => {\r\n    async function fetchTShareSwapperStat() {\r\n      try{\r\n        if(tombFinance.myAccount) {\r\n          setStat(await tombFinance.getTShareSwapperStat(account));\r\n        }\r\n      }\r\n      catch(err){\r\n        console.error(err);\r\n      }\r\n    }\r\n    fetchTShareSwapperStat();\r\n  }, [setStat, tombFinance, fastRefresh, account]);\r\n\r\n  return stat;\r\n};\r\n\r\nexport default useTShareSwapperStats;","import React, { /*useCallback, useEffect, */useMemo, useState } from 'react';\r\nimport Page from '../../components/Page';\r\nimport PitImage from '../../assets/img/pit.png';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\r\nimport { useWallet } from 'use-wallet';\r\nimport UnlockWallet from '../../components/UnlockWallet';\r\nimport PageHeader from '../../components/PageHeader';\r\nimport { Box,/* Paper, Typography,*/ Button, Grid } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\nimport Spacer from '../../components/Spacer';\r\nimport useTombFinance from '../../hooks/useTombFinance';\r\nimport { getDisplayBalance/*, getBalance*/ } from '../../utils/formatBalance';\r\nimport { BigNumber/*, ethers*/ } from 'ethers';\r\nimport useSwapTBondToTShare from '../../hooks/TShareSwapper/useSwapTBondToTShare';\r\nimport useApprove, { ApprovalState } from '../../hooks/useApprove';\r\nimport useTShareSwapperStats from '../../hooks/TShareSwapper/useTShareSwapperStats';\r\nimport TokenInput from '../../components/TokenInput';\r\nimport Card from '../../components/Card';\r\nimport CardContent from '../../components/CardContent';\r\nimport TokenSymbol from '../../components/TokenSymbol';\r\n\r\nconst BackgroundImage = createGlobalStyle`\r\n  body {\r\n    // background: url(${PitImage}) no-repeat !important;\r\n    // background-size: cover !important;\r\n    background-color: #ddd;\r\n  }\r\n`;\r\n\r\nfunction isNumeric(n: any) {\r\n  return !isNaN(parseFloat(n)) && isFinite(n);\r\n}\r\n\r\nconst Sbs: React.FC = () => {\r\n  const { path } = useRouteMatch();\r\n  const { account } = useWallet();\r\n  const tombFinance = useTombFinance();\r\n  const [tbondAmount, setTbondAmount] = useState('');\r\n  const [tshareAmount, setTshareAmount] = useState('');\r\n\r\n  const [approveStatus, approve] = useApprove(tombFinance.ABOND, tombFinance.contracts.TShareSwapper.address);\r\n  const { onSwapTShare } = useSwapTBondToTShare();\r\n  const tshareSwapperStat = useTShareSwapperStats(account);\r\n\r\n  const tshareBalance = useMemo(() => (tshareSwapperStat ? Number(tshareSwapperStat.tshareBalance) : 0), [tshareSwapperStat]);\r\n  const bondBalance = useMemo(() => (tshareSwapperStat ? Number(tshareSwapperStat.tbondBalance) : 0), [tshareSwapperStat]);\r\n\r\n  const handleTBondChange = async (e: any) => {\r\n    if (e.currentTarget.value === '') {\r\n      setTbondAmount('');\r\n      setTshareAmount('');\r\n      return\r\n    }\r\n    if (!isNumeric(e.currentTarget.value)) return;\r\n    setTbondAmount(e.currentTarget.value);\r\n    const updateTShareAmount = await tombFinance.estimateAmountOfTShare(e.currentTarget.value);\r\n    setTshareAmount(updateTShareAmount);  \r\n  };\r\n\r\n  const handleTBondSelectMax = async () => {\r\n    setTbondAmount(String(bondBalance));\r\n    const updateTShareAmount = await tombFinance.estimateAmountOfTShare(String(bondBalance));\r\n    setTshareAmount(updateTShareAmount); \r\n  };\r\n\r\n  const handleTShareSelectMax = async () => {\r\n    setTshareAmount(String(tshareBalance));\r\n    const rateTSharePerTomb = (await tombFinance.getTShareSwapperStat(account)).rateTSharePerTomb;\r\n    const updateTBondAmount = ((BigNumber.from(10).pow(30)).div(BigNumber.from(rateTSharePerTomb))).mul(Number(tshareBalance) * 1e6);\r\n    setTbondAmount(getDisplayBalance(updateTBondAmount, 18, 6));\r\n  };\r\n\r\n  const handleTShareChange = async (e: any) => {\r\n    const inputData = e.currentTarget.value;\r\n    if (inputData === '') {\r\n      setTshareAmount('');\r\n      setTbondAmount('');\r\n      return\r\n    }\r\n    if (!isNumeric(inputData)) return;\r\n    setTshareAmount(inputData);\r\n    const rateTSharePerTomb = (await tombFinance.getTShareSwapperStat(account)).rateTSharePerTomb;\r\n    const updateTBondAmount = ((BigNumber.from(10).pow(30)).div(BigNumber.from(rateTSharePerTomb))).mul(Number(inputData) * 1e6);\r\n    setTbondAmount(getDisplayBalance(updateTBondAmount, 18, 6));\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Page>\r\n        <BackgroundImage />\r\n        {!!account ? (\r\n          <>\r\n            <Route exact path={path}>\r\n              <PageHeader icon={'🏦'} title=\"TBond -> TShare Swap\" subtitle=\"Swap TBond to TShare\" />\r\n            </Route>\r\n            <Box mt={5}>\r\n              <Grid container justify=\"center\" spacing={6}>\r\n                <StyledBoardroom>\r\n                  <StyledCardsWrapper>\r\n                    <StyledCardWrapper>\r\n                      <Card>\r\n                        <CardContent>\r\n                          <StyledCardContentInner>\r\n                            <StyledCardTitle>TBonds</StyledCardTitle>\r\n                            <StyledExchanger>\r\n                              <StyledToken>\r\n                                <StyledCardIcon>\r\n                                  <TokenSymbol symbol={tombFinance.ABOND.symbol} size={54} />\r\n                                </StyledCardIcon>\r\n                              </StyledToken>\r\n                            </StyledExchanger>\r\n                            <Grid item xs={12}>\r\n                              <TokenInput\r\n                                onSelectMax={handleTBondSelectMax}\r\n                                onChange={handleTBondChange}\r\n                                value={tbondAmount}\r\n                                max={bondBalance}\r\n                                symbol=\"TBond\"\r\n                              ></TokenInput>\r\n                            </Grid>\r\n                            <StyledDesc>{`${bondBalance} ABOND Available in Wallet`}</StyledDesc>\r\n                          </StyledCardContentInner>\r\n                        </CardContent>\r\n                      </Card>\r\n                    </StyledCardWrapper>\r\n                    <Spacer size=\"lg\"/>\r\n                    <StyledCardWrapper>\r\n                      <Card>\r\n                        <CardContent>\r\n                          <StyledCardContentInner>\r\n                            <StyledCardTitle>TShare</StyledCardTitle>\r\n                            <StyledExchanger>\r\n                              <StyledToken>\r\n                                <StyledCardIcon>\r\n                                  <TokenSymbol symbol={tombFinance.ASHARE.symbol} size={54} />\r\n                                </StyledCardIcon>\r\n                              </StyledToken>\r\n                            </StyledExchanger>\r\n                            <Grid item xs={12}>\r\n                              <TokenInput\r\n                                onSelectMax={handleTShareSelectMax}\r\n                                onChange={handleTShareChange}\r\n                                value={tshareAmount}\r\n                                max={tshareBalance}\r\n                                symbol=\"TShare\"\r\n                              ></TokenInput>\r\n                            </Grid>\r\n                            <StyledDesc>{`${tshareBalance} ASHARE Available in Swapper`}</StyledDesc>\r\n                          </StyledCardContentInner>\r\n                        </CardContent>\r\n                      </Card>\r\n              \r\n                    </StyledCardWrapper>\r\n                  </StyledCardsWrapper>\r\n                </StyledBoardroom>\r\n              </Grid>\r\n            </Box>\r\n\r\n            <Box mt={5}>\r\n              <Grid container justify=\"center\">\r\n                <Grid item xs={8}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <StyledApproveWrapper>\r\n                      {approveStatus !== ApprovalState.APPROVED ? (\r\n                        <Button\r\n                          disabled={approveStatus !== ApprovalState.NOT_APPROVED}\r\n                          color=\"primary\"\r\n                          variant=\"contained\"\r\n                          onClick={approve}\r\n                          size=\"medium\"\r\n                        >\r\n                          Approve ABOND\r\n                        </Button>\r\n                      ) : (\r\n                        <Button\r\n                          color=\"primary\"\r\n                          variant=\"contained\"\r\n                          onClick={() => onSwapTShare(tbondAmount.toString())}\r\n                          size=\"medium\"\r\n                        >\r\n                          Swap\r\n                        </Button>\r\n                      )}\r\n                      </StyledApproveWrapper>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </>\r\n        ) : (\r\n          <UnlockWallet />\r\n        )}\r\n      </Page>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nconst StyledBoardroom = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledCardsWrapper = styled.div`\r\n  display: flex;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledApproveWrapper = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\nconst StyledCardTitle = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  height: 64px;\r\n  justify-content: center;\r\n  margin-top: ${(props) => -props.theme.spacing[3]}px;\r\n`;\r\n\r\nconst StyledCardIcon = styled.div`\r\n  background-color: ${(props) => props.theme.color.grey[900]};\r\n  width: 72px;\r\n  height: 72px;\r\n  border-radius: 36px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-bottom: ${(props) => props.theme.spacing[2]}px;\r\n`;\r\n\r\nconst StyledExchanger = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  margin-bottom: ${(props) => props.theme.spacing[5]}px;\r\n`;\r\n\r\nconst StyledToken = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst StyledDesc = styled.span``;\r\n\r\nexport default Sbs;\r\n","import { useCallback } from 'react';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport { useTransactionAdder } from '../state/transactions/hooks';\r\nimport { useAddPopup } from '../state/application/hooks';\r\n\r\nfunction useHandleTransactionReceipt(): (promise: Promise<TransactionResponse>, summary: string) => void {\r\n  const addTransaction = useTransactionAdder();\r\n  const addPopup = useAddPopup();\r\n\r\n  return useCallback(\r\n    (promise: Promise<TransactionResponse>, summary: string) => {\r\n      promise\r\n        .then((tx) => addTransaction(tx, { summary }))\r\n        .catch((err) => {\r\n          if (err.message.includes('User denied')) {\r\n            // User denied transaction signature on MetaMask.\r\n            return;\r\n          }\r\n          const message = `Unable to ${summary[0].toLowerCase()}${summary.slice(1)}`;\r\n          console.error(`${message}: ${err.message || err.stack}`);\r\n          addPopup({ error: { message, stack: err.message || err.stack } });\r\n        });\r\n    },\r\n    [addPopup, addTransaction],\r\n  );\r\n}\r\n\r\nexport default useHandleTransactionReceipt;\r\n","import { BigNumber, ethers } from 'ethers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks';\r\nimport useAllowance from './useAllowance';\r\nimport ERC20 from '../tomb-finance/ERC20';\r\n\r\nconst APPROVE_AMOUNT = ethers.constants.MaxUint256;\r\nconst APPROVE_BASE_AMOUNT = BigNumber.from('1000000000000000000000000');\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nfunction useApprove(token: ERC20, spender: string): [ApprovalState, () => Promise<void>] {\r\n  const pendingApproval = useHasPendingApproval(token.address, spender);\r\n  const currentAllowance = useAllowance(token, spender, pendingApproval);\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN;\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lt(APPROVE_BASE_AMOUNT)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED;\r\n  }, [currentAllowance, pendingApproval]);\r\n\r\n  const addTransaction = useTransactionAdder();\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily');\r\n      return;\r\n    }\r\n\r\n    const response = await token.approve(spender, APPROVE_AMOUNT);\r\n    addTransaction(response, {\r\n      summary: `Approve ${token.symbol}`,\r\n      approval: {\r\n        tokenAddress: token.address,\r\n        spender: spender,\r\n      },\r\n    });\r\n  }, [approvalState, token, spender, addTransaction]);\r\n\r\n  return [approvalState, approve];\r\n}\r\n\r\nexport default useApprove;\r\n","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport AccountButton from '../Nav/AccountButton';\r\n\r\nconst UnlockWallet = () => {\r\n  return (\r\n    <Box style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\r\n      <AccountButton />\r\n      {/* <Button color=\"primary\" variant=\"contained\" onClick={() => connect('injected')}>Unlock Wallet</Button> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UnlockWallet;\r\n","import React, { useContext } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext);\r\n\r\n  let s: number;\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6];\r\n      break;\r\n    case 'sm':\r\n      s = spacing[2];\r\n      break;\r\n    case 'md':\r\n    default:\r\n      s = spacing[4];\r\n  }\r\n\r\n  return <StyledSpacer size={s} />;\r\n};\r\n\r\ninterface StyledSpacerProps {\r\n  size: number;\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`;\r\n\r\nexport default Spacer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface PageHeaderProps {\r\n  icon: React.ReactNode;\r\n  subtitle?: string;\r\n  title?: string;\r\n}\r\n\r\nconst PageHeader: React.FC<PageHeaderProps> = ({ icon, subtitle, title }) => {\r\n  return (\r\n    <StyledPageHeader>\r\n      {/* <StyledIcon>{icon}</StyledIcon> */}\r\n      <StyledTitle>{title}</StyledTitle>\r\n      <StyledSubtitle>{subtitle}</StyledSubtitle>\r\n    </StyledPageHeader>\r\n  );\r\n};\r\n\r\nconst StyledPageHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-bottom: ${(props) => props.theme.spacing[6]}px;\r\n  padding-top: ${(props) => props.theme.spacing[6]}px;\r\n  max-width: 512px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst StyledTitle = styled.h1`\r\n  color: ${(props) => props.theme.color.grey[200]};\r\n  font-size: 36px;\r\n  font-weight: 700;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst StyledSubtitle = styled.h3`\r\n  color: ${(props) => props.theme.color.grey[700]};\r\n  font-size: 18px;\r\n  font-weight: 400;\r\n  margin: 0;\r\n  padding: 0;\r\n  text-align: center;\r\n`;\r\n\r\nexport default PageHeader;\r\n"],"sourceRoot":""}